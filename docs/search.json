[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Teaching assistant at the University of Primorska, that includes (or included) labs and practicals of\n\nMarine Ecology,\nMarine Conservation Biology,\nEcology of terrestrial ecosystems,\nAdvanced topics in Conservation biology (in which I teach Introduction to R),\nBiology and conservation of large vertebrates,\nMarine protected areas - human dimensions,\nPopulation biology,\nConservation ecology of marine mammals\n\nat master study programme Nature Conservation and:\n\nBasics of using R as GIS,\nIntroductory zoology,\nBiology and diversity of vertebrates\n\nat bachelor study programme Conservation biology.\nI finished master studies of Nature Conservation in 2015 (University of Primorska, Slovenia) and bachelor studies of Ecology and Nature Conservation in 2012 (University of Maribor, Slovenia). Currently I am a PhD student formally enroled in University of Ljubljana, Slovenia) with the dissertation title Spatial ecology and conservation of loggerhead sea turtles in Adriatic sea under supervision of Assoc. Prof. Bojan Lazar (UP) and Assist. Prof. Tomaž Skrbinšek (UL)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Matic Jančič: Teaching portfolio",
    "section": "",
    "text": "SUMMARY STATISTICS IN R\n\n\n\nIntroduction to R\n\n\n\nAdvanced Topics in Conservation Biology, Lab 5\n\n\n\nMatic Jančič; Department of biodiversity, University of Primorska\n\n\nSep 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGRAPHICAL DATA EXPLORATION IN R\n\n\n\nIntroduction to R\n\n\n\nAdvanced Topics in Conservation Biology, Lab 4\n\n\n\nMatic Jančič; Department of biodiversity, University of Primorska\n\n\nSep 18, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSELECTING, FILTERING AND CREATING NEW VARIABLES IN R\n\n\n\nIntroduction to R\n\n\n\nAdvanced Topics in Conservation Biology, Lab 3\n\n\n\nMatic Jančič; Department of biodiversity, University of Primorska\n\n\nSep 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObtaining occurrences and creating pseudo-absences of species\n\n\n\nINTRODUCTION TO SPECIES DISTRIBUTION MODELS IN R\n\n\n\n\n\n\n\nMatic Jančič & assist. prof. Peter Glasnović; Department of biodiversity, University of Primorska\n\n\nSep 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWORKING DIRECTORIES AND DATA IMPORT IN R\n\n\n\nIntroduction to R\n\n\n\nAdvanced Topics in Conservation Biology, Lab 2\n\n\n\nMatic Jančič; Department of biodiversity, University of Primorska\n\n\nSep 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMARINE SPECIES AND GEOSPATIAL DATA EXPLORATION AND VISUALIZATION\n\n\n\nIntroduction to marine ecological data in R\n\n\n\nWorkshop Day 4 at Faculty of Natural Sciences, Juraj Dobrila University of Pula\n\n\n\nMatic Jančič; Department of biodiversity, University of Primorska\n\n\nMar 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nACCESSING MARINE GEOSPATIAL DATA IN R WITH SDMPREDICTORS\n\n\n\nIntroduction to marine ecological data in R\n\n\nIntroduction to GIS in R\n\n\n\nWorkshop Day 3 at Faculty of Natural Sciences, Juraj Dobrila University of Pula\n\n\n\nMatic Jančič; Department of biodiversity, University of Primorska\n\n\nMar 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nACCESSING MARINE SPECIES OCCURENCES IN R WITH RGBIF\n\n\n\nIntroduction to marine ecological data in R\n\n\nIntroduction to GIS in R\n\n\n\nWorkshop Day 2 at Faculty of Natural Sciences, Juraj Dobrila University of Pula\n\n\n\nMatic Jančič (& Peter Glasnović); Department of biodiversity, University of Primorska\n\n\nMar 22, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nINTRODUCTION TO R & R STUDIO\n\n\n\nIntroduction to marine ecological data in R\n\n\nIntroduction to R\n\n\nIntroduction to GIS in R\n\n\n\nWorkshop Day 1 at Faculty of Natural Sciences, Juraj Dobrila University of Pula\n\n\n\nMatic Jančič; Department of biodiversity, University of Primorska\n\n\nMar 21, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/01_INTRODUCTION TO R & R STUDIO.html",
    "href": "posts/01_INTRODUCTION TO R & R STUDIO.html",
    "title": "INTRODUCTION TO R & R STUDIO",
    "section": "",
    "text": "Summary\n\n\n\nIn this lab, you will be introduced to:\n\nR and RStudio,\nusing R scripts to type and run basic R code,\nusing basic operations (addition, subtraction, multiplication) and logical operators in R,\nfundamental data types in R: vectors, dataframes and lists."
  },
  {
    "objectID": "posts/01_INTRODUCTION TO R & R STUDIO.html#partly-funded-by-eu-erasmus-programme-for-higher-education-staff-mobility.",
    "href": "posts/01_INTRODUCTION TO R & R STUDIO.html#partly-funded-by-eu-erasmus-programme-for-higher-education-staff-mobility.",
    "title": "INTRODUCTION TO R & R STUDIO",
    "section": "",
    "text": "Partly funded by EU Erasmus+ Programme for Higher Education Staff Mobility"
  },
  {
    "objectID": "posts/02_GIS_GBIF.html",
    "href": "posts/02_GIS_GBIF.html",
    "title": "ACCESSING MARINE SPECIES OCCURENCES IN R WITH RGBIF",
    "section": "",
    "text": "In this lab, you will be introduced to:\n\nGlobal Biodiversity Information Facility (GBIF) database,\ninstalling and loading R packages,\nusing R code to access the marine species occurrence data on GBIF server and download it,\ndata filtering and selecting to retain only information of interest,\nsimple visualization of spatial points."
  },
  {
    "objectID": "posts/02_GIS_GBIF.html#partly-funded-by-eu-erasmus-programme-for-higher-education-staff-mobility.",
    "href": "posts/02_GIS_GBIF.html#partly-funded-by-eu-erasmus-programme-for-higher-education-staff-mobility.",
    "title": "ACCESSING MARINE SPECIES OCCURENCES IN R WITH RGBIF",
    "section": "",
    "text": "Partly funded by EU Erasmus+ Programme for Higher Education Staff Mobility"
  },
  {
    "objectID": "posts/03_GIS_GLOBAL ENV DATA.html",
    "href": "posts/03_GIS_GLOBAL ENV DATA.html",
    "title": "ACCESSING MARINE GEOSPATIAL DATA IN R WITH SDMPREDICTORS",
    "section": "",
    "text": "In this lab, you will be introduced to:\n\nraster data types and R packages for working with it,\naccessing and downloading marine (and/or terrestrial) global raster data with sdmpredictors package,\ninspecting the properties of a raster layer,\ncolors in R,\nsimple visualization of global raster layer."
  },
  {
    "objectID": "posts/03_GIS_GLOBAL ENV DATA.html#partly-funded-by-eu-erasmus-programme-for-higher-education-staff-mobility.",
    "href": "posts/03_GIS_GLOBAL ENV DATA.html#partly-funded-by-eu-erasmus-programme-for-higher-education-staff-mobility.",
    "title": "ACCESSING MARINE GEOSPATIAL DATA IN R WITH SDMPREDICTORS",
    "section": "",
    "text": "Partly funded by EU Erasmus+ Programme for Higher Education Staff Mobility"
  },
  {
    "objectID": "posts/04_DATA EXPLORATION.html",
    "href": "posts/04_DATA EXPLORATION.html",
    "title": "MARINE SPECIES AND GEOSPATIAL DATA EXPLORATION AND VISUALIZATION",
    "section": "",
    "text": "In this lab, you will be introduced to:\n\nextracting values from raster layers at locations of species occurrences,\nsimple visualization of numerical data (boxplots) with ggplot2."
  },
  {
    "objectID": "posts/04_DATA EXPLORATION.html#partly-funded-by-eu-erasmus-programme-for-higher-education-staff-mobility.",
    "href": "posts/04_DATA EXPLORATION.html#partly-funded-by-eu-erasmus-programme-for-higher-education-staff-mobility.",
    "title": "MARINE SPECIES AND GEOSPATIAL DATA EXPLORATION AND VISUALIZATION",
    "section": "",
    "text": "Partly funded by EU Erasmus+ Programme for Higher Education Staff Mobility"
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "Glasnović, P., Fišer, Ž., Jančič, M., Balant, M., and Surina, B. (2023). Areography, environmental heterogeneity and spatial models explain patterns of past and present diversity in Edraianthus (Campanulaceae). Botanical Journal of the Linnean Society, boac079. doi: 10.1093/botlinnean/boac079.\n\n\nJančič, M., Salvemini, P., Holcer, D., Piroli, V., Haxhiu, I., and Lazar, B. (2022). Apparent increasing importance of Adriatic Sea as a developmental habitat for Mediterranean green sea turtles (Chelonia mydas). Natura Croatica 31, 225–240. doi: 10.20302/NC.2022.31.16."
  },
  {
    "objectID": "posts/02_Intro2R_data import and exploration.html#tabular-data-preparation-and-naming-conventions-in-r",
    "href": "posts/02_Intro2R_data import and exploration.html#tabular-data-preparation-and-naming-conventions-in-r",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Tabular data preparation and naming conventions in R",
    "text": "Tabular data preparation and naming conventions in R\nThere is a set of R packages called tidyverse developed mostly by Hadley Wickham and described in his book R for data science (second edition). We will be using a lot of functions from tidyverse as they are very appropriate for R beginners. To use them to your maximum advantage, you need to get familiar with the concept of a tidy data frame:\n\nOne column is one variable (i.e. gender, height, age),\nOne row is one observation (for all measurements we did on one individual or any other given subject),\nOne field is one value.\n\n\n\n\nTidy dataframe template.\n\n\nIf you structure your dataframes in such a way, it will be efficiently organised and ready to be used when imported, processed and analysed by tidyverse and also base R functions. There are some other basic requirements/recommendations that your data should conform to in order to avoid problems while importing and using it:\n\ndecimal separator in must be a dot!\ncategorical variables should have consistent naming of the groups!\ncolumn names should be without spaces! (connect with underscore _)\ncolumn names must be without symbols! (i.e.: ?, $, *, +, (, ), -, /, }, {, |, &gt;, &lt; , #)\ncolumn names must not start with numbers!\nempty rows should be deleted!\ncomments should be deleted!\nusing č,š,ž,ć,đ is not recommended!\nformat date in the long format! (Day, month, year as: 01/01/2016)"
  },
  {
    "objectID": "posts/02_Intro2R_data import and exploration.html#what-can-be-imported-in-r-how-and-from-where",
    "href": "posts/02_Intro2R_data import and exploration.html#what-can-be-imported-in-r-how-and-from-where",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "What can be imported in R? How and from where?",
    "text": "What can be imported in R? How and from where?\nR supports a variety of file types to be imported, including:\n\ndataframes (saved as comma separated value files - .csv, excel spreadsheets - .xlsx, text files - .txt, google spreadsheets, etc. )\nR format files (.Rdata, .RDS)\ngeospatial data (shape files - .shp, raster files - .ASCII, .img or .tiff)\ndata from databases (i.e. MySQL)\nfiles from web or web databases through specialized packages (i.e. rgbif or sdmpredictors packages; GBIF = Global Biodiverstity Information Facility)\nfiles from other specialized statistical software (i.e. SPSS, STATA, SAS)\n\nFor importing files from the hard drive (most often .txt, .csv and xlsx), there is a specific function that imports specific file type. For example, read.csv() is used to import comma separated values file, read.table() for text files and read_excel() for excel spreadsheets. All this functions have a common argument, we need to specify: file or path which is the location of the document you want to import on our hard-drives. There are two ways we can specify this locations:\n\nfull file path, i.e. C:\\Users\\Matic\\OneDrive - UPR\\01_FAMNIT\\02_VAJE\\2021_22\\201_sodobni pristopi\\2_Importing data and data transfomations\\01_data\\example_data.csv - not recommended.\nfile path without the working directory, i.e. 01_data\\example_data.csv - better, but not optimal.\n\nThe working directory is a default location on the hard-drive, where R “looks” for files. As we usually don’t know which one it is, we use getwd() function with empty brackets to figure it out:\n\ngetwd()\n\nIf we want to change the working directory, we use setwd() function, where we specify the location on our computers hard drive (mandatory in quotations). For example, if I want to set Desktop as working directory for my computer, I would use:\n\nsetwd(\"C:\\Users\\matic.jancic\\Desktop“)\n\n\n\n\n\n\n\nCaution\n\n\n\nEach time we restart RStudio, the working directory will change back to the default. This means that for our code to work and import the data, we would need to re-run setwd() command.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe preferable and recommended way to avoid potential problems with setting and resetting the working directory each time we come back to RStudio is to use R project workflow.\n\n\nWe need to create a folder on our hard-drive and assign it to an R project. An icon will appear in the folder and starting RStudio from this icon will automatically set the working directory to that particular folder. If we than keep our data, scripts and results in this folder as well, we will save ourselfs from issues associated with working directories. More info about R projects here.\n\n\n\n\n\n\nTask: Create new R project\n\n\n\nClick on File tab in your RStudio, select New project and create new R project on your Desktop called My first R project by following the instructions bellow:\n\n\n\n\n\nNew directory.\n\n\n\n\n\nNew project.\n\n\n\n\n\nMy first R project.\n\n\nGo to the Desktop of your computer and check for the new folder. What is in it?\n\n\n\nR project folder and icon.\n\n\n\n\n\n\n\n\nExercises\n\n\n\n\n\n\nCreate two new folders within My first R project called 01_data and 02_scripts.\nClose R studio and reopen it by using the R project icon called My first R project from the new folder.\nOpen an empty R script (if not already) and use getwd() function to check your current working directory. To what is it set now?"
  },
  {
    "objectID": "posts/02_Intro2R_data import and exploration.html#datasets",
    "href": "posts/02_Intro2R_data import and exploration.html#datasets",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Datasets",
    "text": "Datasets\n\n\n\n\n\n\nTask: download files\n\n\n\nFrom e-classroom download the files penguins.txt and iris.csv. Copy and paste them into the 01_data folder.\n\n\n\nThe penguins.txt file includes measurements of bill lengths and depths, flipper lengths and body mass for three penguin species, collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\nCredit: Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins. doi: 10.5281/zenodo.3960218.\n\nThe iris.csv contains measurements in centimeters of the petal length and width and sepal length and width of three Iris species: Iris virginica, I. versicolor and I. setosa.\n\n\n\nIris species and measurements."
  },
  {
    "objectID": "posts/02_Intro2R_data import and exploration.html#importing-.txt-and-.csv-files-in-r",
    "href": "posts/02_Intro2R_data import and exploration.html#importing-.txt-and-.csv-files-in-r",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Importing .txt and .csv files in R",
    "text": "Importing .txt and .csv files in R\nFirst we will import penguins.txt file by using read.table() function. As the working directory is set to our project folder, we need to specify the subfolder (01_data/) and the name of the file we want to import. We must also include the file extension, .txt.\nReminders from the previous lab:\n\nthe path name is a character strings and must be contained within parenthesis \" \".\nif we want to use data after applying some function to it, we need to assign it to objects (&lt;-),\nwe are the ones that choose the names of objects (penguins in this case)\n\nTaking into account all of the above, the following code should import the penguins dataset and assign it to the penguins object:\n\npenguins &lt;- read.table(file = \"01_data/penguins.txt\") \n\nThe resulting penguins object should have 344 observations of 8 variables.\n\nLet’s continue with importing .csv file with read.csv() function. As the working directory is set to our project folder, we need to specify the subfolder (01_data/) and the name of the file we want to import. We must also include the file extension, .csv.\nTo import iris.csv and assign it to an object iris use the following code:\n\niris &lt;- read.csv(file = \"01_data/iris.csv\") \n\nThe resulting object should contain 150 observations of 5 variables.\n\nIt is recommended to always check the properties of the imported data, to verify that the import has the same properties as the file on the hard drive. Some of the functions were introduced last time, this time we will add str() and summary().\n\nnrow(iris)\n\n[1] 150\n\nncol(iris)\n\n[1] 5\n\ndim(iris)\n\n[1] 150   5\n\nclass(iris)\n\n[1] \"data.frame\"\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal_Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal_Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ...\n\nsummary(iris)\n\n  Sepal_Length    Sepal_Width     Petal_Length    Petal_Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n   Species         \n Length:150        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\n\n\n\n\n\n\nTask\n\n\n\nUse all of the functions above on the penguins object."
  },
  {
    "objectID": "posts/02_Intro2R_data import and exploration.html#common-issueserrors-and-how-to-resolve-them",
    "href": "posts/02_Intro2R_data import and exploration.html#common-issueserrors-and-how-to-resolve-them",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Common issues/errors and how to resolve them",
    "text": "Common issues/errors and how to resolve them\n\nWith the location of and path to the file\nThe most common error you will encounter with both functions, especially at the beginning, is the following:\n\n\nError in file(file, \"rt\"): cannot open the connection\n\n\n\n\n\n\n\n\nTask\n\n\n\nRun the following code. Why does it not work?\n\n\n\niris &lt;- read.table(file = \"01_data/iris.txt\") \n\niris &lt;- read.csv(file = \"iris.csv\") \n\niris &lt;- read.csv(\"01_data/iriis.csv\")\n\nThis error means that the path to the file is not specified correctly. In plain terms, R is looking for the file which\n\nis not in the folder you specified,\ndoes not have a name you specified, or\nis not in a format you specified.\n\n\n\n\n\n\n\nSolution\n\n\n\nDouble check the working directory, the folder where the data is stored, the name of the file and its extension:\n\n\n\n\nWith the number of rows and/or columns differs between original file and the created object\nSometimes the first row of the file, which includes column names, is treated as data when imported. When this happens, the columns will be named as V1, V2, etc. until the last column while the actual column names will be in the first row of the data, as can be seen below:\n\n\n            V1          V2           V3          V4      V5\n1 Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n2          5.1         3.5          1.4         0.2  setosa\n3          4.9           3          1.4         0.2  setosa\n4          4.7         3.2          1.3         0.2  setosa\n5          4.6         3.1          1.5         0.2  setosa\n6            5         3.6          1.4         0.2  setosa\n\n\n\n\n\n\n\n\nSolution\n\n\n\nWithin the read.csv() or read.table() include additional argument header = TRUE. This will tell R that the first row includes column names:\nread.csv(..., header = TRUE) or read.table(..., header = TRUE).\n\n\nSometimes the imported data will have only one column. When this happens the symbol that separates the values in rows was not the one R was expecting it to be, as can be seen below:\n\n\n  Sepal_Length.Sepal_Width.Petal_Length.Petal_Width.Species\n1                                    5.1,3.5,1.4,0.2,setosa\n2                                      4.9,3,1.4,0.2,setosa\n3                                    4.7,3.2,1.3,0.2,setosa\n4                                    4.6,3.1,1.5,0.2,setosa\n5                                      5,3.6,1.4,0.2,setosa\n6                                    5.4,3.9,1.7,0.4,setosa\n\n\n\n\n\n\n\n\nSolution\n\n\n\nWe determine the symbol that separates the values from the output and set it within the read.csv() or read.table(). In this example, the separator is comma - ,, which we set with the argument sep = \",\":\nread.csv(..., sep = \",\") or read.table(..., sep = \",\").\nAnother very common separator you will encounter in the .csv files is a semicolon - ;, while in the .txt tab \\t is commonly used by program encoding. Note that the separator is included within quotations!"
  },
  {
    "objectID": "posts/02_Intro2R_data import and exploration.html#exercise",
    "href": "posts/02_Intro2R_data import and exploration.html#exercise",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Exercise",
    "text": "Exercise\n\n\n\n\n\n\nTask\n\n\n\nRead the instructions carefully. If you don’t understand something or something doesn’t work straight away, first think about the problem/error, consult the materials in front of, the neighbor on your left, then on your right. If after all that you still don’t know how to fix the problem or proceed, than ask me for help!\n1.1) Open an empty excel file. By following the tidy data frame concepts and basic requirements the data should conform to, create a random dataset. You can be creative and type in the excel whatever pops on your mind, but at minimum make two columns with numbers and two columns with names/categories for 10 observations.\n1.2) When done, go to File tab and choose Save as and select where you want the file to be saved. In the pop-up window, choose a name for your file than click on the dropdown menu next to the Save as type and choose CSV (Comma delimited).\n1.3) Import this file into R and explore if it was imported correctly.\n\n2.1) Find one dataset in either .csv or .txt format online.\n2.2) Download it, import it into R and assign it to an object with meaningful name.\n2.3) Check if it was imported correctly, i.e. that it contains the same number of rows and observations as the file on your hardrive. If not, check if you encountered one of the most common errors, that are listed above.\n\n\nSave the script with all you commands"
  },
  {
    "objectID": "posts/02_Intro2R_data import and exploration.html#exercise-until-the-end-of-the-lab-if-not-completed-homework",
    "href": "posts/02_Intro2R_data import and exploration.html#exercise-until-the-end-of-the-lab-if-not-completed-homework",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Exercise until the end of the lab, if not completed homework",
    "text": "Exercise until the end of the lab, if not completed homework\nADD DATACAMP HOMEWORK …\n\nFor those strugling to find the .csv or .txt datasets online: link."
  },
  {
    "objectID": "posts/02_Intro2R_data import and exploration.html#exercise-until-the-end-of-the-lab-or-homework-if-not-completed",
    "href": "posts/02_Intro2R_data import and exploration.html#exercise-until-the-end-of-the-lab-or-homework-if-not-completed",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Exercise until the end of the lab or homework, if not completed",
    "text": "Exercise until the end of the lab or homework, if not completed\n\n\n\nDatacamp assignment: data import.\n\n\n\nFor those strugling to find the .csv or .txt datasets online: link."
  },
  {
    "objectID": "posts/01_INTRODUCTION TO R & R STUDIO.html#task",
    "href": "posts/01_INTRODUCTION TO R & R STUDIO.html#task",
    "title": "INTRODUCTION TO R & R STUDIO",
    "section": "Task",
    "text": "Task\nOpen an empty R script from the File dropdown menu by clicking New file \\ R script. The script will have a name Untitled1 (or Untitled2, if a blank script was already open).\nSave the script to the Desktop of your computer and name it Introduction to R."
  },
  {
    "objectID": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#import-iris-dataset",
    "href": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#import-iris-dataset",
    "title": "SELECTING, FILTERING AND CREATING NEW VARIABLES IN R",
    "section": "Import iris dataset",
    "text": "Import iris dataset\n\n\n\n\n\n\nTask\n\n\n\nStart the RStudio from the R project icon that you created in the previous lab!\n\n\nTo be sure that the working directory is set to your project folder, use the get getwd() function. The result should end with .../My first R project (if you followed instructions in the second lab).\n\ngetwd()\n\nImport the dataset, assign it to an object called iris and inspect that it was loaded correctly:\n\niris &lt;- read.csv(file = \"01_data/iris.csv\") \n\nhead(iris)\n\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal_Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal_Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ..."
  },
  {
    "objectID": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#selecting-and-filtering-dataframes",
    "href": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#selecting-and-filtering-dataframes",
    "title": "SELECTING, FILTERING AND CREATING NEW VARIABLES IN R",
    "section": "Selecting and filtering dataframes",
    "text": "Selecting and filtering dataframes\nEverything in R can be done in multiple ways. We will look at how to filter and select parts of the data, how to create new variables and how to export our data. All of these are commonly used approaches, that you will use in the following exercises and also other classes. I will show you how to use base R functions and functions from dplyr package. Note, that there are some other packages and approaches, that can be used, each having its benefits and drawbacks (i.e. data.table package).\n\nBase R\n\n\n\n\n\n\nWhat does base R mean?\n\n\n\nWhen we install R to our computers, we “only” get access to some functionalities that are available within R framework - this is called base R. The reason for this is, that there are so many available “tools/add-ons”, of which individual user doesn’t need a vast majority. Additional functionalities can be added easily and tailored to individual needs.\n\n\nFor selecting a single column from a dataframe using base R we use the $ sign. Before $ sign we write the name of data object we want to select from, after $ sign the name of column we want to select. From the imported data frame, we would like to take only the values of Petal_Length. By doing this, R simply prints the values in the console:\n\niris$Petal_Length\n\n  [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4\n [19] 1.7 1.5 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2\n [37] 1.3 1.4 1.3 1.5 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0\n [55] 4.6 4.5 4.7 3.3 4.6 3.9 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0\n [73] 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0\n [91] 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1 6.0 5.1 5.9 5.6 5.8 6.6 4.5 6.3\n[109] 5.8 6.1 5.1 5.3 5.5 5.0 5.1 5.3 5.5 6.7 6.9 5.0 5.7 4.9 6.7 4.9 5.7 6.0\n[127] 4.8 4.9 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 4.8 5.4 5.6 5.1 5.1 5.9\n[145] 5.7 5.2 5.0 5.2 5.4 5.1\n\n\nAlternative way is to use square brackets - [ , ]. Comma in the brackets separates filtering by rows (left) and columns (right). For column Petal_Length we specify its position in a dataframe.\n\niris[,3]\n\n  [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4\n [19] 1.7 1.5 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2\n [37] 1.3 1.4 1.3 1.5 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0\n [55] 4.6 4.5 4.7 3.3 4.6 3.9 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0\n [73] 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0\n [91] 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1 6.0 5.1 5.9 5.6 5.8 6.6 4.5 6.3\n[109] 5.8 6.1 5.1 5.3 5.5 5.0 5.1 5.3 5.5 6.7 6.9 5.0 5.7 4.9 6.7 4.9 5.7 6.0\n[127] 4.8 4.9 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 4.8 5.4 5.6 5.1 5.1 5.9\n[145] 5.7 5.2 5.0 5.2 5.4 5.1\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf for filtering we use the number of column, the results might change if the input data changes! In case you change your .csv file on the hard-drive, and the third column now contains another variable, R will take the third column and not column with Petal_Length, as it doesn’t care for the changes you made and you might not notice that. However, this can (will) have effect on the subsequent analysis, if it depends on this particular filtering operation.\n\n\n\nTo filter out specific values of one column using base R we use square brackets - [ , ] and specify a column with the $ and an expression for filtering. All of this must be on the left side of the comma! For example, if we would like to filter out all rows with Petal_width smaller than 0.2 cm:\n\niris[iris$Petal_Width &lt; 0.2,] \n\n   Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n10          4.9         3.1          1.5         0.1  setosa\n13          4.8         3.0          1.4         0.1  setosa\n14          4.3         3.0          1.1         0.1  setosa\n33          5.2         4.1          1.5         0.1  setosa\n38          4.9         3.6          1.4         0.1  setosa\n\n\nWe can also combine two conditions for filtering (AND or OR). For two conditions to apply at the same time we use AND operator - &:\n\niris[iris$Petal_Width &lt; 0.2 & iris$Sepal_Length &gt; 4.8,] \n\n   Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n10          4.9         3.1          1.5         0.1  setosa\n33          5.2         4.1          1.5         0.1  setosa\n38          4.9         3.6          1.4         0.1  setosa\n\n\nTo apply one OR the other condition, we use OR operator |:\n\niris[iris$Petal_Width &lt; 0.2 | iris$Sepal_Length &gt; 7.6, ] \n\n    Sepal_Length Sepal_Width Petal_Length Petal_Width   Species\n10           4.9         3.1          1.5         0.1    setosa\n13           4.8         3.0          1.4         0.1    setosa\n14           4.3         3.0          1.1         0.1    setosa\n33           5.2         4.1          1.5         0.1    setosa\n38           4.9         3.6          1.4         0.1    setosa\n118          7.7         3.8          6.7         2.2 virginica\n119          7.7         2.6          6.9         2.3 virginica\n123          7.7         2.8          6.7         2.0 virginica\n132          7.9         3.8          6.4         2.0 virginica\n136          7.7         3.0          6.1         2.3 virginica\n\n\nIn both cases, the whole expression must be written on the left side of the comma  to work.\nSometimes we want to filter based on a specific word. In our case, maybe only one of the three species. We use double equal sign and write the word precisely as it is in our dataframe, included within the quotes. With the $ we tell R in which column it should look for the word:\n\niris[iris$Species == \"virginica\",]\n\n    Sepal_Length Sepal_Width Petal_Length Petal_Width   Species\n101          6.3         3.3          6.0         2.5 virginica\n102          5.8         2.7          5.1         1.9 virginica\n103          7.1         3.0          5.9         2.1 virginica\n104          6.3         2.9          5.6         1.8 virginica\n105          6.5         3.0          5.8         2.2 virginica\n106          7.6         3.0          6.6         2.1 virginica\n107          4.9         2.5          4.5         1.7 virginica\n108          7.3         2.9          6.3         1.8 virginica\n109          6.7         2.5          5.8         1.8 virginica\n110          7.2         3.6          6.1         2.5 virginica\n111          6.5         3.2          5.1         2.0 virginica\n112          6.4         2.7          5.3         1.9 virginica\n113          6.8         3.0          5.5         2.1 virginica\n114          5.7         2.5          5.0         2.0 virginica\n115          5.8         2.8          5.1         2.4 virginica\n116          6.4         3.2          5.3         2.3 virginica\n117          6.5         3.0          5.5         1.8 virginica\n118          7.7         3.8          6.7         2.2 virginica\n119          7.7         2.6          6.9         2.3 virginica\n120          6.0         2.2          5.0         1.5 virginica\n121          6.9         3.2          5.7         2.3 virginica\n122          5.6         2.8          4.9         2.0 virginica\n123          7.7         2.8          6.7         2.0 virginica\n124          6.3         2.7          4.9         1.8 virginica\n125          6.7         3.3          5.7         2.1 virginica\n126          7.2         3.2          6.0         1.8 virginica\n127          6.2         2.8          4.8         1.8 virginica\n128          6.1         3.0          4.9         1.8 virginica\n129          6.4         2.8          5.6         2.1 virginica\n130          7.2         3.0          5.8         1.6 virginica\n131          7.4         2.8          6.1         1.9 virginica\n132          7.9         3.8          6.4         2.0 virginica\n133          6.4         2.8          5.6         2.2 virginica\n134          6.3         2.8          5.1         1.5 virginica\n135          6.1         2.6          5.6         1.4 virginica\n136          7.7         3.0          6.1         2.3 virginica\n137          6.3         3.4          5.6         2.4 virginica\n138          6.4         3.1          5.5         1.8 virginica\n139          6.0         3.0          4.8         1.8 virginica\n140          6.9         3.1          5.4         2.1 virginica\n141          6.7         3.1          5.6         2.4 virginica\n142          6.9         3.1          5.1         2.3 virginica\n143          5.8         2.7          5.1         1.9 virginica\n144          6.8         3.2          5.9         2.3 virginica\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n\n\n\n\n\nDplyr R package\nOne alternative to do all of the above is to use dplyr package, which is more intuitive to use. It cannot be applied to all data types, but works perfectly with the tidy data frames. It does not come with the base R, so we need to install and load it.\nIn R, we install a package using install.packages() function with the name of the package in quotation marks within the parenthesis. This (should) automatically download and install the package. We need to load the package each time that we start or restart R or RStudio. This is done with library() function with the name of package without quotation marks in the parenthesis. Each package comes with a document in which all important information are available, example for dplyr can be accessed here. More popular packages usually have informative “cheat sheets” as well (here).\n\n\n\n\n\n\nPackages\n\n\n\nTo add new functionalities to base R, we need to install R packages from the internet (imagine R package as an add-on or extension of the base installation). Installation needs to be done only once, before the first use of the package!\nHowever, installing the package does not make it available for use. Again, not all packages are needed all the time so we have to load the package each time we restart R or RStudio to be able to use it!\n\n\n\ninstall.packages(\"dplyr\")\n\n\nlibrary(dplyr)\n\n\n\n\n\n\n\nTip\n\n\n\nIf you encounter the following error: Error in ... : could not find function \"...\", the most likely reason is that you have not run the library function, to make the package available within your current R session!\n\n\nFor selecting a single column from a dataframe we use select() function which takes two arguments: the name of data object we want to select from and the name of column we want to select. With select() function we can choose multiple columns and also rename them inside a single command. Same example as above, taking only the values of Petal_Length from iris:\n\nselect(iris, Petal_Length)\n\n    Petal_Length\n1            1.4\n2            1.4\n3            1.3\n4            1.5\n5            1.4\n6            1.7\n7            1.4\n8            1.5\n9            1.4\n10           1.5\n11           1.5\n12           1.6\n13           1.4\n14           1.1\n15           1.2\n16           1.5\n17           1.3\n18           1.4\n19           1.7\n20           1.5\n21           1.7\n22           1.5\n23           1.0\n24           1.7\n25           1.9\n26           1.6\n27           1.6\n28           1.5\n29           1.4\n30           1.6\n31           1.6\n32           1.5\n33           1.5\n34           1.4\n35           1.5\n36           1.2\n37           1.3\n38           1.4\n39           1.3\n40           1.5\n41           1.3\n42           1.3\n43           1.3\n44           1.6\n45           1.9\n46           1.4\n47           1.6\n48           1.4\n49           1.5\n50           1.4\n51           4.7\n52           4.5\n53           4.9\n54           4.0\n55           4.6\n56           4.5\n57           4.7\n58           3.3\n59           4.6\n60           3.9\n61           3.5\n62           4.2\n63           4.0\n64           4.7\n65           3.6\n66           4.4\n67           4.5\n68           4.1\n69           4.5\n70           3.9\n71           4.8\n72           4.0\n73           4.9\n74           4.7\n75           4.3\n76           4.4\n77           4.8\n78           5.0\n79           4.5\n80           3.5\n81           3.8\n82           3.7\n83           3.9\n84           5.1\n85           4.5\n86           4.5\n87           4.7\n88           4.4\n89           4.1\n90           4.0\n91           4.4\n92           4.6\n93           4.0\n94           3.3\n95           4.2\n96           4.2\n97           4.2\n98           4.3\n99           3.0\n100          4.1\n101          6.0\n102          5.1\n103          5.9\n104          5.6\n105          5.8\n106          6.6\n107          4.5\n108          6.3\n109          5.8\n110          6.1\n111          5.1\n112          5.3\n113          5.5\n114          5.0\n115          5.1\n116          5.3\n117          5.5\n118          6.7\n119          6.9\n120          5.0\n121          5.7\n122          4.9\n123          6.7\n124          4.9\n125          5.7\n126          6.0\n127          4.8\n128          4.9\n129          5.6\n130          5.8\n131          6.1\n132          6.4\n133          5.6\n134          5.1\n135          5.6\n136          6.1\n137          5.6\n138          5.5\n139          4.8\n140          5.4\n141          5.6\n142          5.1\n143          5.1\n144          5.9\n145          5.7\n146          5.2\n147          5.0\n148          5.2\n149          5.4\n150          5.1\n\n\nFor filtering by row values we use filter() function which also takes two arguments: the name of data object we want to select from and the expression based on which we want to filter. Same example as above:\n\nfilter(iris, Petal_Width &lt; 0.2)\n\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n1          4.9         3.1          1.5         0.1  setosa\n2          4.8         3.0          1.4         0.1  setosa\n3          4.3         3.0          1.1         0.1  setosa\n4          5.2         4.1          1.5         0.1  setosa\n5          4.9         3.6          1.4         0.1  setosa\n\n\nAnd combine two conditions within the select, same examples as above:\n\nfilter(iris, Petal_Width &lt; 0.2 & Sepal_Length &gt; 4.8)\n\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n1          4.9         3.1          1.5         0.1  setosa\n2          5.2         4.1          1.5         0.1  setosa\n3          4.9         3.6          1.4         0.1  setosa\n\n\n\nfilter(iris, Petal_Width &lt; 0.2 | Sepal_Length &gt; 7.6)\n\n   Sepal_Length Sepal_Width Petal_Length Petal_Width   Species\n1           4.9         3.1          1.5         0.1    setosa\n2           4.8         3.0          1.4         0.1    setosa\n3           4.3         3.0          1.1         0.1    setosa\n4           5.2         4.1          1.5         0.1    setosa\n5           4.9         3.6          1.4         0.1    setosa\n6           7.7         3.8          6.7         2.2 virginica\n7           7.7         2.6          6.9         2.3 virginica\n8           7.7         2.8          6.7         2.0 virginica\n9           7.9         3.8          6.4         2.0 virginica\n10          7.7         3.0          6.1         2.3 virginica\n\n\nNext, filtering by word, same example:\n\nfilter(iris, Species == \"virginica\")\n\n   Sepal_Length Sepal_Width Petal_Length Petal_Width   Species\n1           6.3         3.3          6.0         2.5 virginica\n2           5.8         2.7          5.1         1.9 virginica\n3           7.1         3.0          5.9         2.1 virginica\n4           6.3         2.9          5.6         1.8 virginica\n5           6.5         3.0          5.8         2.2 virginica\n6           7.6         3.0          6.6         2.1 virginica\n7           4.9         2.5          4.5         1.7 virginica\n8           7.3         2.9          6.3         1.8 virginica\n9           6.7         2.5          5.8         1.8 virginica\n10          7.2         3.6          6.1         2.5 virginica\n11          6.5         3.2          5.1         2.0 virginica\n12          6.4         2.7          5.3         1.9 virginica\n13          6.8         3.0          5.5         2.1 virginica\n14          5.7         2.5          5.0         2.0 virginica\n15          5.8         2.8          5.1         2.4 virginica\n16          6.4         3.2          5.3         2.3 virginica\n17          6.5         3.0          5.5         1.8 virginica\n18          7.7         3.8          6.7         2.2 virginica\n19          7.7         2.6          6.9         2.3 virginica\n20          6.0         2.2          5.0         1.5 virginica\n21          6.9         3.2          5.7         2.3 virginica\n22          5.6         2.8          4.9         2.0 virginica\n23          7.7         2.8          6.7         2.0 virginica\n24          6.3         2.7          4.9         1.8 virginica\n25          6.7         3.3          5.7         2.1 virginica\n26          7.2         3.2          6.0         1.8 virginica\n27          6.2         2.8          4.8         1.8 virginica\n28          6.1         3.0          4.9         1.8 virginica\n29          6.4         2.8          5.6         2.1 virginica\n30          7.2         3.0          5.8         1.6 virginica\n31          7.4         2.8          6.1         1.9 virginica\n32          7.9         3.8          6.4         2.0 virginica\n33          6.4         2.8          5.6         2.2 virginica\n34          6.3         2.8          5.1         1.5 virginica\n35          6.1         2.6          5.6         1.4 virginica\n36          7.7         3.0          6.1         2.3 virginica\n37          6.3         3.4          5.6         2.4 virginica\n38          6.4         3.1          5.5         1.8 virginica\n39          6.0         3.0          4.8         1.8 virginica\n40          6.9         3.1          5.4         2.1 virginica\n41          6.7         3.1          5.6         2.4 virginica\n42          6.9         3.1          5.1         2.3 virginica\n43          5.8         2.7          5.1         1.9 virginica\n44          6.8         3.2          5.9         2.3 virginica\n45          6.7         3.3          5.7         2.5 virginica\n46          6.7         3.0          5.2         2.3 virginica\n47          6.3         2.5          5.0         1.9 virginica\n48          6.5         3.0          5.2         2.0 virginica\n49          6.2         3.4          5.4         2.3 virginica\n50          5.9         3.0          5.1         1.8 virginica\n\n\n\n\n\n\n\n\nQuestions to consider\n\n\n\n\nDid you notice any difference between outputs after using the same operations in base R and dplyr?\nWhat is an R package? How do you access and use its functionalities?"
  },
  {
    "objectID": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#creating-new-variables-in-r",
    "href": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#creating-new-variables-in-r",
    "title": "SELECTING, FILTERING AND CREATING NEW VARIABLES IN R",
    "section": "Creating new variables in R",
    "text": "Creating new variables in R\nWith the $ we can also create and assign new variables to our data frame. Before the assign operator we specify the name of the new variable (must not be the same as existing column names, otherwise it will overwrite one existing column). After the assign operator we specify what we want to be stored in this new variable. For example, we can calculate the ratio between Sepal_Length and Sepal_Width. R will go from row to row, calculate the ratio and store it in the same row of the new column:\n\niris$ratio &lt;- iris$Sepal_Length / iris$Sepal_Width\n\nnames(iris)\n\n[1] \"Sepal_Length\" \"Sepal_Width\"  \"Petal_Length\" \"Petal_Width\"  \"Species\"     \n[6] \"ratio\"       \n\nstr(iris)\n\n'data.frame':   150 obs. of  6 variables:\n $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal_Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal_Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ...\n $ ratio       : num  1.46 1.63 1.47 1.48 1.39 ...\n\n\nFor creating new variables, we use mutate() function which also takes two arguments: the name of data object we want to select from and the name of the new variable followed by the expression, based on which the variable will be created. Same example as above, just choosing a different column name:\n\niris &lt;- mutate(iris, ratio2 = Sepal_Length / Sepal_Width)\n\nnames(iris)\n\n[1] \"Sepal_Length\" \"Sepal_Width\"  \"Petal_Length\" \"Petal_Width\"  \"Species\"     \n[6] \"ratio\"        \"ratio2\"      \n\nstr(iris)      \n\n'data.frame':   150 obs. of  7 variables:\n $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal_Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal_Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ...\n $ ratio       : num  1.46 1.63 1.47 1.48 1.39 ...\n $ ratio2      : num  1.46 1.63 1.47 1.48 1.39 ..."
  },
  {
    "objectID": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#exporting-datasets",
    "href": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#exporting-datasets",
    "title": "SELECTING, FILTERING AND CREATING NEW VARIABLES IN R",
    "section": "Exporting datasets",
    "text": "Exporting datasets\nOpposite to importing files with read functions, we export files with corresponding write functions. For exporting to .csv file, we use write.csv() and for .txt file write.table(). Both have two arguments, first is x, which is the R object we want to export (in our case iris) and the other file, the name of the file that will be created on computers hard drive, in our case “iris_new.csv\". Adding prefix \"01_data/...\" will save it to that particular folder within our working directory.The argument rownames = FALSE will prevent R to add a column with row names, that would contain consecutive numbers starting from 1.\n\nwrite.csv(x = iris, file = \"01_data/iris_new.csv\", row.names = FALSE)\n\nwrite.table(x = iris, file = \"01_data/iris_new.txt\", row.names = FALSE)\n\n\n\n\n\n\n\nTask\n\n\n\nCheck your R project directory on the hard drive, if the two files are indeed there."
  },
  {
    "objectID": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#exercises",
    "href": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#exercises",
    "title": "SELECTING, FILTERING AND CREATING NEW VARIABLES IN R",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nTask\n\n\n\nRead the instructions carefully. If you don’t understand something or something doesn’t work straight away, first think about the problem/error, consult the materials in front of you, than google, than the neighbor on your left and on your right. If after all that you still don’t know how to fix the problem or proceed, than ask me for help!\n\n1.1) Import the penguins dataset and check if the file was correctly imported (344 observations, 8 variables) adjust the code if needed.\n1.2) Inspect the dataset and figure which penguin species are included and on which islands they were monitored in the dataset?\n1.3) Using base R, filter the dataset to contain only penguins with bill_depth_mm less than 17.3.\n1.4) Using base R, filter the dataset to contain only all penguins from Dream island in 2008. Were all three species recorded there that year?\n1.5) Using dplyr, filter the dataset to contain only penguins with flipper_length_mm more than 213.\n1.6) Using dplyr, filter the dataset to contain only penguin female penguins from Biscoe island.\n1.7) Using base R, create a new column in which you calculate the ratio of bill length to bill depth.\n1.8) Using dplyr, create a new column in which body mass will be expressed in kilograms instead of grams (body_mass_g).\n1.9) Export the dataframe with two new columns as a penguins_new.txt file.\n\n2.1) Import the dataset you downloaded from the internet in the previous lab.\n2.2) Using base R and dplyr, perform four sensible filtering and/or selecting operations.\n2.3) In case your data has two or more numerical columns, create one new column using mathematical operation on two other columns of your choice by both base R and dplyr.\n2.4) In case your data has only one column with numerical data, calculate a new column as a square root or squared value of the numerical column.\n2.5) export your dataset with new columns in a format of your choice.\n\n\n\nUntil the end of the class or homework\n\n\n\nDatacamp assignment, Lab 3"
  },
  {
    "objectID": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#mandatory-reading-before-next-class",
    "href": "posts/03_Intro2R_selecting, filtering_and_creating_new_variables.html#mandatory-reading-before-next-class",
    "title": "SELECTING, FILTERING AND CREATING NEW VARIABLES IN R",
    "section": "Mandatory reading before next class",
    "text": "Mandatory reading before next class\n(on e-classroom)\nZuur, Ieno & Elphick, 2010, A protocol for data exploration to avoid common statistical problems"
  },
  {
    "objectID": "posts/02_Intro2R_data_import_and_exploration.html#tabular-data-preparation-and-naming-conventions-in-r",
    "href": "posts/02_Intro2R_data_import_and_exploration.html#tabular-data-preparation-and-naming-conventions-in-r",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Tabular data preparation and naming conventions in R",
    "text": "Tabular data preparation and naming conventions in R\nThere is a set of R packages called tidyverse developed mostly by Hadley Wickham and described in his book R for data science (second edition). We will be using a lot of functions from tidyverse as they are very appropriate for R beginners. To use them to your maximum advantage, you need to get familiar with the concept of a tidy data frame:\n\nOne column is one variable (i.e. gender, height, age),\nOne row is one observation (for all measurements we did on one individual or any other given subject),\nOne field is one value.\n\n\n\n\nTidy dataframe template.\n\n\nIf you structure your dataframes in such a way, it will be efficiently organised and ready to be used when imported, processed and analysed by tidyverse and also base R functions. There are some other basic requirements/recommendations that your data should conform to in order to avoid problems while importing and using it:\n\ndecimal separator in must be a dot!\ncategorical variables should have consistent naming of the groups!\ncolumn names should be without spaces! (connect with underscore _)\ncolumn names must be without symbols! (i.e.: ?, $, *, +, (, ), -, /, }, {, |, &gt;, &lt; , #)\ncolumn names must not start with numbers!\nempty rows should be deleted!\ncomments should be deleted!\nusing č,š,ž,ć,đ is not recommended!\nformat date in the long format! (Day, month, year as: 01/01/2016)"
  },
  {
    "objectID": "posts/02_Intro2R_data_import_and_exploration.html#what-can-be-imported-in-r-how-and-from-where",
    "href": "posts/02_Intro2R_data_import_and_exploration.html#what-can-be-imported-in-r-how-and-from-where",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "What can be imported in R? How and from where?",
    "text": "What can be imported in R? How and from where?\nR supports a variety of file types to be imported, including:\n\ndataframes (saved as comma separated value files - .csv, excel spreadsheets - .xlsx, text files - .txt, google spreadsheets, etc. )\nR format files (.Rdata, .RDS)\ngeospatial data (shape files - .shp, raster files - .ASCII, .img or .tiff)\ndata from databases (i.e. MySQL)\nfiles from web or web databases through specialized packages (i.e. rgbif or sdmpredictors packages; GBIF = Global Biodiverstity Information Facility)\nfiles from other specialized statistical software (i.e. SPSS, STATA, SAS)\n\nFor importing files from the hard drive (most often .txt, .csv and xlsx), there is a specific function that imports specific file type. For example, read.csv() is used to import comma separated values file, read.table() for text files and read_excel() for excel spreadsheets. All this functions have a common argument, we need to specify: file or path which is the location of the document you want to import on our hard-drives. There are two ways we can specify this locations:\n\nfull file path, i.e. C:\\Users\\Matic\\OneDrive - UPR\\01_FAMNIT\\02_VAJE\\2021_22\\201_sodobni pristopi\\2_Importing data and data transfomations\\01_data\\example_data.csv - not recommended.\nfile path without the working directory, i.e. 01_data\\example_data.csv - better, but not optimal.\n\nThe working directory is a default location on the hard-drive, where R “looks” for files. As we usually don’t know which one it is, we use getwd() function with empty brackets to figure it out:\n\ngetwd()\n\nIf we want to change the working directory, we use setwd() function, where we specify the location on our computers hard drive (mandatory in quotations). For example, if I want to set Desktop as working directory for my computer, I would use:\n\nsetwd(\"C:\\Users\\matic.jancic\\Desktop“)\n\n\n\n\n\n\n\nCaution\n\n\n\nEach time we restart RStudio, the working directory will change back to the default. This means that for our code to work and import the data, we would need to re-run setwd() command.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe preferable and recommended way to avoid potential problems with setting and resetting the working directory each time we come back to RStudio is to use R project workflow.\n\n\nWe need to create a folder on our hard-drive and assign it to an R project. An icon will appear in the folder and starting RStudio from this icon will automatically set the working directory to that particular folder. If we than keep our data, scripts and results in this folder as well, we will save ourselfs from issues associated with working directories. More info about R projects here.\n\n\n\n\n\n\nTask: Create new R project\n\n\n\nClick on File tab in your RStudio, select New project and create new R project on your Desktop called My first R project by following the instructions bellow:\n\n\n\n\n\nNew directory.\n\n\n\n\n\nNew project.\n\n\n\n\n\nMy first R project.\n\n\nGo to the Desktop of your computer and check for the new folder. What is in it?\n\n\n\nR project folder and icon.\n\n\n\n\n\n\n\n\nExercises\n\n\n\n\n\n\nCreate two new folders within My first R project called 01_data and 02_scripts.\nClose R studio and reopen it by using the R project icon called My first R project from the new folder.\nOpen an empty R script (if not already) and use getwd() function to check your current working directory. To what is it set now?"
  },
  {
    "objectID": "posts/02_Intro2R_data_import_and_exploration.html#datasets",
    "href": "posts/02_Intro2R_data_import_and_exploration.html#datasets",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Datasets",
    "text": "Datasets\n\n\n\n\n\n\nTask: download files\n\n\n\nFrom e-classroom download the files penguins.txt and iris.csv. Copy and paste them into the 01_data folder.\n\n\n\nThe penguins.txt file includes measurements of bill lengths and depths, flipper lengths and body mass for three penguin species, collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\nCredit: Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins. doi: 10.5281/zenodo.3960218.\n\nThe iris.csv contains measurements in centimeters of the petal length and width and sepal length and width of three Iris species: Iris virginica, I. versicolor and I. setosa.\n\n\n\nIris species and measurements."
  },
  {
    "objectID": "posts/02_Intro2R_data_import_and_exploration.html#importing-.txt-and-.csv-files-in-r",
    "href": "posts/02_Intro2R_data_import_and_exploration.html#importing-.txt-and-.csv-files-in-r",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Importing .txt and .csv files in R",
    "text": "Importing .txt and .csv files in R\nFirst we will import penguins.txt file by using read.table() function. As the working directory is set to our project folder, we need to specify the subfolder (01_data/) and the name of the file we want to import. We must also include the file extension, .txt.\nReminders from the previous lab:\n\nthe path name is a character strings and must be contained within parenthesis \" \".\nif we want to use data after applying some function to it, we need to assign it to objects (&lt;-),\nwe are the ones that choose the names of objects (penguins in this case)\n\nTaking into account all of the above, the following code should import the penguins dataset and assign it to the penguins object:\n\npenguins &lt;- read.table(file = \"01_data/penguins.txt\") \n\nThe resulting penguins object should have 344 observations of 8 variables.\n\nLet’s continue with importing .csv file with read.csv() function. As the working directory is set to our project folder, we need to specify the subfolder (01_data/) and the name of the file we want to import. We must also include the file extension, .csv.\nTo import iris.csv and assign it to an object iris use the following code:\n\niris &lt;- read.csv(file = \"01_data/iris.csv\") \n\nThe resulting object should contain 150 observations of 5 variables.\n\nIt is recommended to always check the properties of the imported data, to verify that the import has the same properties as the file on the hard drive. Some of the functions were introduced last time, this time we will add str() and summary().\n\nnrow(iris)\n\n[1] 150\n\nncol(iris)\n\n[1] 5\n\ndim(iris)\n\n[1] 150   5\n\nclass(iris)\n\n[1] \"data.frame\"\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal_Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal_Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ...\n\nsummary(iris)\n\n  Sepal_Length    Sepal_Width     Petal_Length    Petal_Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n   Species         \n Length:150        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\n\n\n\n\n\n\nTask\n\n\n\nUse all of the functions above on the penguins object."
  },
  {
    "objectID": "posts/02_Intro2R_data_import_and_exploration.html#common-issueserrors-and-how-to-resolve-them",
    "href": "posts/02_Intro2R_data_import_and_exploration.html#common-issueserrors-and-how-to-resolve-them",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Common issues/errors and how to resolve them",
    "text": "Common issues/errors and how to resolve them\n\nWith the location of and path to the file\nThe most common error you will encounter with both functions, especially at the beginning, is the following:\n\n\nError in file(file, \"rt\"): cannot open the connection\n\n\n\n\n\n\n\n\nTask\n\n\n\nRun the following code. Why does it not work?\n\n\n\niris &lt;- read.table(file = \"01_data/iris.txt\") \n\niris &lt;- read.csv(file = \"iris.csv\") \n\niris &lt;- read.csv(\"01_data/iriis.csv\")\n\nThis error means that the path to the file is not specified correctly. In plain terms, R is looking for the file which\n\nis not in the folder you specified,\ndoes not have a name you specified, or\nis not in a format you specified.\n\n\n\n\n\n\n\nSolution\n\n\n\nDouble check the working directory, the folder where the data is stored, the name of the file and its extension:\n\n\n\n\nWith the number of rows and/or columns differs between original file and the created object\nSometimes the first row of the file, which includes column names, is treated as data when imported. When this happens, the columns will be named as V1, V2, etc. until the last column while the actual column names will be in the first row of the data, as can be seen below:\n\n\n            V1          V2           V3          V4      V5\n1 Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n2          5.1         3.5          1.4         0.2  setosa\n3          4.9           3          1.4         0.2  setosa\n4          4.7         3.2          1.3         0.2  setosa\n5          4.6         3.1          1.5         0.2  setosa\n6            5         3.6          1.4         0.2  setosa\n\n\n\n\n\n\n\n\nSolution\n\n\n\nWithin the read.csv() or read.table() include additional argument header = TRUE. This will tell R that the first row includes column names:\nread.csv(..., header = TRUE) or read.table(..., header = TRUE).\n\n\nSometimes the imported data will have only one column. When this happens the symbol that separates the values in rows was not the one R was expecting it to be, as can be seen below:\n\n\n  Sepal_Length.Sepal_Width.Petal_Length.Petal_Width.Species\n1                                    5.1,3.5,1.4,0.2,setosa\n2                                      4.9,3,1.4,0.2,setosa\n3                                    4.7,3.2,1.3,0.2,setosa\n4                                    4.6,3.1,1.5,0.2,setosa\n5                                      5,3.6,1.4,0.2,setosa\n6                                    5.4,3.9,1.7,0.4,setosa\n\n\n\n\n\n\n\n\nSolution\n\n\n\nWe determine the symbol that separates the values from the output and set it within the read.csv() or read.table(). In this example, the separator is comma - ,, which we set with the argument sep = \",\":\nread.csv(..., sep = \",\") or read.table(..., sep = \",\").\nAnother very common separator you will encounter in the .csv files is a semicolon - ;, while in the .txt tab \\t is commonly used by program encoding. Note that the separator is included within quotations!"
  },
  {
    "objectID": "posts/02_Intro2R_data_import_and_exploration.html#exercise",
    "href": "posts/02_Intro2R_data_import_and_exploration.html#exercise",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Exercise",
    "text": "Exercise\n\n\n\n\n\n\nTask\n\n\n\nRead the instructions carefully. If you don’t understand something or something doesn’t work straight away, first think about the problem/error, consult the materials in front of, the neighbor on your left, then on your right. If after all that you still don’t know how to fix the problem or proceed, than ask me for help!\n1.1) Open an empty excel file. By following the tidy data frame concepts and basic requirements the data should conform to, create a random dataset. You can be creative and type in the excel whatever pops on your mind, but at minimum make two columns with numbers and two columns with names/categories for 10 observations.\n1.2) When done, go to File tab and choose Save as and select where you want the file to be saved. In the pop-up window, choose a name for your file than click on the dropdown menu next to the Save as type and choose CSV (Comma delimited).\n1.3) Import this file into R and explore if it was imported correctly.\n\n2.1) Find one dataset in either .csv or .txt format online. The dataset should at minimum contain 100 observations (rows), one column with measurements (for example: weight, height, population or number of individuals), and one or two columns that divide the data into groups (for example: year, species, country etc.).\n2.2) Download it, import it into R and assign it to an object with meaningful name.\n2.3) Check if it was imported correctly, i.e. that it contains the same number of rows and observations as the file on your hardrive. If not, check if you encountered one of the most common errors, that are listed above.\n\n\nSave the script with all you commands"
  },
  {
    "objectID": "posts/02_Intro2R_data_import_and_exploration.html#exercise-until-the-end-of-the-lab-or-homework-if-not-completed",
    "href": "posts/02_Intro2R_data_import_and_exploration.html#exercise-until-the-end-of-the-lab-or-homework-if-not-completed",
    "title": "WORKING DIRECTORIES AND DATA IMPORT IN R",
    "section": "Exercise until the end of the lab or homework, if not completed",
    "text": "Exercise until the end of the lab or homework, if not completed\n\n\n\nDatacamp assignment: data import.\n\n\n\nFor those strugling to find the .csv or .txt datasets online: link."
  },
  {
    "objectID": "posts/04_Intro2R_visual_data_exploration.html",
    "href": "posts/04_Intro2R_visual_data_exploration.html",
    "title": "GRAPHICAL DATA EXPLORATION IN R",
    "section": "",
    "text": "Summary\n\n\n\nIn this lab you will learn how to:\n\nexplore data using boxplots, dotchart and scatterplots,\neffectively visualise data for multiple groups,\nmanipulate plot elements and export plots in high quality."
  },
  {
    "objectID": "posts/04_Intro2R_visual_data_exploration.html#why-data-exploration",
    "href": "posts/04_Intro2R_visual_data_exploration.html#why-data-exploration",
    "title": "GRAPHICAL DATA EXPLORATION IN R",
    "section": "Why data exploration?",
    "text": "Why data exploration?\n\n\n\n\n\n\nQuestions to consider\n\n\n\n\nWhy is it recommended and very important to perform data exploration before starting any statistical analysis?\nWhat are the most common issues, that you can encounter in your biological datasets (referring to Zuur et al., 2010)?\n\n\n\n\nAnscombe quartet\nAn example dataset that shows the importance of visual data exploration is the famous Anscombe’s quartet, comprised of four data sets that have nearly identical descriptive statistics, yet are very different. Each dataset consists of eleven (x, y) points that were constructed by the statistician Francis Anscombe to demonstrate both the importance of graphing data before analyzing it and the effect of outliers and other influential observations on statistical properties. The dataset is available as built in dataset (can be loaded by data(anscombe) in a sligthly different format).\n\n\n\n\n\nx1\nx2\nx3\nx4\ny1\ny2\ny3\ny4\n\n\n\n\n10\n10\n10\n8\n8.04\n9.14\n7.46\n6.58\n\n\n8\n8\n8\n8\n6.95\n8.14\n6.77\n5.76\n\n\n13\n13\n13\n8\n7.58\n8.74\n12.74\n7.71\n\n\n9\n9\n9\n8\n8.81\n8.77\n7.11\n8.84\n\n\n11\n11\n11\n8\n8.33\n9.26\n7.81\n8.47\n\n\n14\n14\n14\n8\n9.96\n8.10\n8.84\n7.04\n\n\n6\n6\n6\n8\n7.24\n6.13\n6.08\n5.25\n\n\n4\n4\n4\n19\n4.26\n3.10\n5.39\n12.50\n\n\n12\n12\n12\n8\n10.84\n9.13\n8.15\n5.56\n\n\n7\n7\n7\n8\n4.82\n7.26\n6.42\n7.91\n\n\n5\n5\n5\n8\n5.68\n4.74\n5.73\n6.89\n\n\n\n\n\n\nFirst we will visualize this datasets. As we are looking at the relationship between two numerical variables, we need to use points for representation in 2D space and split the data by the ID of a sample.\n\n\n\n\n\n\n\n\n\n\n\nTask\n\n\n\nHow would you describe the relationship between x and y variable in each dataset? Is the relationships between x & y the same among the datasets?\n\n\nLets look at the summaries of the x and y variables divided by each ID value:\n\nthe mean value and variance of x,\nthe mean value and variance of y and\ncorrelation between x and y.\n\n\n\n\n\n\nID\nmean_x\nvar_x\nmean_y\nvar_y\ncorrelation\n\n\n\n\na\n9\n11\n7.500909\n4.127269\n0.8164205\n\n\nb\n9\n11\n7.500909\n4.127629\n0.8162365\n\n\nc\n9\n11\n7.500000\n4.122620\n0.8162867\n\n\nd\n9\n11\n7.500909\n4.123249\n0.8165214\n\n\n\n\n\nProperties of the four dataset are almost identical, right? The differences start on the third decimal of variance and correlation factor.\nSimilar to the statistical properties of x and y, the results of the linear regression are the same for all 4 datasets:\n\n\n\n\n\n\n\n\n\n\n\nQuestions to consider\n\n\n\n\nIs there an actual linear relationship between x and y? In which dataset?"
  },
  {
    "objectID": "posts/04_Intro2R_visual_data_exploration.html#import-iris-dataset",
    "href": "posts/04_Intro2R_visual_data_exploration.html#import-iris-dataset",
    "title": "GRAPHICAL DATA EXPLORATION IN R",
    "section": "Import iris dataset",
    "text": "Import iris dataset\n\n\n\n\n\n\nTask\n\n\n\nStart the RStudio from the R project icon that you created in the previous lab!\n\n\nTo be sure that the working directory is set to your project folder, use the get getwd() function. The result should end with .../My first R project (if you followed the instructions in the second lab).\n\ngetwd()\n\nImport the dataset, assign it to an object called iris and inspect that it was loaded correctly:\n\niris &lt;- read.csv(file = \"01_data/iris.csv\") \n\nhead(iris)\n\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal_Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal_Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ...\n\n\nWe will take one additional step in data preparation. In the first lab you were introduced to vector types. If we take a look at the column Species, You will see that it is treated as a character.\n\nclass(iris$Species)\n\n[1] \"character\"\n\n\nSome functions we will use today, require however, the character data to be treated asfactors. The values itself do not change, but R treats them differently. We will thus create a new column (for the sake of demonstration), named Species_f, with f remembering us that this is a factor. The function that will convert values from character to factor isas.factor():\n\niris$Species_f &lt;- as.factor(iris$Species)\n\nhead(iris)\n\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species Species_f\n1          5.1         3.5          1.4         0.2  setosa    setosa\n2          4.9         3.0          1.4         0.2  setosa    setosa\n3          4.7         3.2          1.3         0.2  setosa    setosa\n4          4.6         3.1          1.5         0.2  setosa    setosa\n5          5.0         3.6          1.4         0.2  setosa    setosa\n6          5.4         3.9          1.7         0.4  setosa    setosa\n\nclass(iris$Species_f)\n\n[1] \"factor\""
  },
  {
    "objectID": "posts/04_Intro2R_visual_data_exploration.html#graphical-data-exploration",
    "href": "posts/04_Intro2R_visual_data_exploration.html#graphical-data-exploration",
    "title": "GRAPHICAL DATA EXPLORATION IN R",
    "section": "Graphical data exploration",
    "text": "Graphical data exploration\n\nBoxplots & dotcharts\nWe will start with visualising iris data. We will take a look at how to create a boxplot and Cleveland dotplot (Zuur, Ieno & Elphich, 2010, Step 1). A boxplot divides data based on its 25th and 75th quantiles (the box), and further on the upper and lower range of 1.5 * Inter Quantile Range (upper and lower whisker) and “outliers” - values that are outside these range (solid dots).\nWe will use package ggplot2 to create and design our boxplots. First we need to install it install.packages(\"ggplot2\") - and than load it to make its functionality available to use - library(ggplot2).\n\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n\nThe basic function to create any plot is ggplot() which contains two arguments we need to define: data and aes(). For data we specify the object in which information for our plot is stored, in our case this will be iris. In aes() argument we can set many different arguments, for us at this point the y and x are important, as with them we specify which column or variable we want to use as y and/or x axis of our plot. The aes() is a shortened version of aesthetics, meaning that with it we define visual characterics of our plots.\nA second function we add to ggplot() is a type of a plot we want to make, in our case this will geom_boxplot(), that initially does not require any arguments and which we add with a + sign.\nFirst we will create a boxplot for all values of Sepal_Length column in iris dataframe. We will define data = iris and aes(y = Sepal_Length) followed by the + sign. We continue in the next row and add geom_boxplot() with empty brackets.\n\nggplot(data = iris, # which data object we will plot\n       # which variable will be displayed on y - axis\n       aes(y = Sepal_Length)) +\n    # what type of a plot we will create\n    geom_boxplot() \n\n\n\n\n\nCleveland dotplot plots the row number of an observation againts the observation value, and provide more detailed information than a boxplot. Points that stick out on the right-hand side, or on the left-hand side, are observed values that are considerably larger, or smaller, than the majority of the observations, and require further investigation.\nCleveland dotplot is a part of base R and it is created by using the dotchart() function. It takes one mandatory argument, the data we want to plot, and two additional arguments, with which we give names to x and y axis (xlab and ylab):\n\ndotchart(iris$Sepal_Length,\n         xlab = \"Sepal length (cm)\", # this is the name of x axis\n         ylab = \"Order of the data\") #this is the name of y axis\n\n\n\n\n\nNext, we know that we have data for three species. So in the next boxplot, we will display data separately for each group. We do this by adding x = Species_f inside aes():\n\nggplot(data = iris, \n       # adding variable that will be displayed on x - axis\n       aes(x = Species_f, y = Sepal_Length)) + \n    geom_boxplot() \n\n\n\n\nFor Cleveland dotplot, we include argument groups = iris$Species_f, to display data separately for the three groups:\n\ndotchart(iris$Sepal_Length,\n         groups = iris$Species_f,\n         xlab = \"Sepal length (cm)\", # this is the name of x axis\n         ylab = \"Order of the data\") #this is the name of y axis\n\n\n\n\n\n\n\n\n\n\nQuestions to consider\n\n\n\nTake a look at the boxplot and dotplot, where data is grouped by species.\n\nCan you observe any patterns?\nWhat about the differences between the three species?\n\n\n\n\n\n\nScatterplots\nWe are often interested in visualising two numerical variables, to inspect if there are any patterns within the data (similar to our introductory Anscombe example). We call this a scatterplot, and we will plot Sepal_Length on the x axis and Sepal_Width on the y axis. The initial call to ggplot stays the same, while this time we use geom_point() to add points to our plot:\n\nggplot(iris, aes(x = Sepal_Length, y = Sepal_Width)) +\n    geom_point()\n\n\n\n\nAs before, we can extend this to incorporate the information about the species. One option is to use the color = argument within the aes() function. This will automatically give each species a predefined color and will display the legend on the side.\n\nggplot(iris, aes(x = Sepal_Length, y = Sepal_Width, color = Species_f)) +\n    geom_point() \n\n\n\n\nIn case that observations are overlapping by a large degree, we can use faceting to divide plots by each species. For this we need to add the facet_wrap() function, where ~ Species_f denotes that species is the variable by which R should divide the data:\n\nggplot(iris, aes(x = Sepal_Length, y = Sepal_Width)) +\n    geom_point() +\n    facet_wrap(~ Species_f)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, facets have the same values on the x and y axis. The good thing is, that this makes it easy to compare the three groups (species). On the other hand, in each facet, there is a lot of white (empty) space."
  },
  {
    "objectID": "posts/04_Intro2R_visual_data_exploration.html#changing-plot-elements-and-design",
    "href": "posts/04_Intro2R_visual_data_exploration.html#changing-plot-elements-and-design",
    "title": "GRAPHICAL DATA EXPLORATION IN R",
    "section": "Changing plot elements and design",
    "text": "Changing plot elements and design\nWe will continue with just a bit of “polishing” to make plots more suitable for scientific/professional publications (including your masters thesis). We will extend the scatter plot, where the iris species were denoted by color. Remember, to add another commands to ggplots we simply continue the last line with the + sign.\nFirst we will change the annotation of x and y - axis with xlab() and ylab() functions. Inside the brackets we will define the name of the axis - \"Sepal Length (cm)\" and \"Sepal Width (cm)\". Remember that character strings must be included in quotations \"\":\n\nggplot(iris, aes(x = Sepal_Length, \n                 y = Sepal_Width, \n                 color = Species_f)) +\n    geom_point() +\n    ylab(\"Sepal Length (cm)\") +\n    xlab(\"Sepal Width (cm)\")\n\n\n\n\nWe can also change the legend title, which now includes the _f. To do that, we can use labs() function in which we tell R that the name of the variable that we are using to color the points is Species:\n\nggplot(iris, aes(x = Sepal_Length, \n                 y = Sepal_Width, \n                 color = Species_f)) +\n    geom_point() +\n    ylab(\"Sepal Length (cm)\")+\n    xlab(\"Sepal Width (cm)\") +\n    labs(color = \"Species\")\n\n\n\n\nThe last thing we will change today will be the design of plot elements. We can do that manually, but there are already several themes prepared (including some specific R packages, such as ggthemes - more info here or here. To us, theme_bw() and theme_classic() are of interest.\nWe use the same commands to create the boxplot, we add the + sign, continue in the next row and add theme_bw() with empty brackets.\n\nggplot(iris, aes(x = Sepal_Length, \n                 y = Sepal_Width, \n                 color = Species_f)) +\n    geom_point() +\n    ylab(\"Sepal Length (cm)\")+\n    xlab(\"Sepal Width (cm)\") +\n    labs(color = \"Species\") +\n    theme_bw()\n\n\n\n\nWe repeat the process, but this time add theme_classic() with empty brackets.\n\nggplot(iris, aes(x = Sepal_Length, \n                 y = Sepal_Width, \n                 color = Species_f)) +\n    geom_point() +\n    ylab(\"Sepal Length (cm)\")+\n    xlab(\"Sepal Width (cm)\") +\n    labs(color = \"Species\") +\n    theme_classic() \n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\nAre there any other things you would like to modify (for example change the size of the points)?\nIf you have any suggestions, we can try to add them before exporting the plot!\n\n\n\nLets also take a look at how we can export this boxplot in high resolution print quality. First we save our plot to an object, lets call it plot_to_export. Then, we install, if needed, and load the ggpubr package, from which we use ggexport function. Within it, we will define 4 arguments:filename =, width =, height and res, which is an abbreviation for resolution (300 is a minimum requirement for quality print):\n\nplot_to_export &lt;- \n    ggplot(iris, aes(x = Sepal_Length, \n                     y = Sepal_Width, \n                     color = Species_f)) +\n        geom_point() +\n        ylab(\"Sepal Length (cm)\")+\n        xlab(\"Sepal Width (cm)\") +\n        labs(color = \"Species\") +\n        theme_classic()\n\n# load required package\ninstall.packages(\"ggpubr\")\nlibrary(ggpubr)\n\n# we need to set width, height and res manually, \n# usually change the numbers several times to get what we want\nggexport(plot_to_export,\n         filename = \"iris_scatter.png\",\n         width = 2400, \n         height = 1800, \n         res=300)"
  },
  {
    "objectID": "posts/04_Intro2R_visual_data_exploration.html#exercises",
    "href": "posts/04_Intro2R_visual_data_exploration.html#exercises",
    "title": "GRAPHICAL DATA EXPLORATION IN R",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nTask\n\n\n\nRead the instructions carefully. If you don’t understand something or something doesn’t work straight away, first think about the problem/error, consult the materials in front of you, than google, than the neighbor on your left and on your right. If after all that you still don’t know how to fix the problem or proceed, than ask me for help!\n\n1.1) Import the penguins dataset and check if the file was correctly imported (344 observations, 8 variables), adjust the code if needed.\n1.2) Create new columns in which species, island and sex will be treated as factors by R.\n1.3) Create a boxplot which will display values of body_mass_g separately for each species.\n1.4) Create a dotchart which will display values of flipper_length_mm for each species.\n1.5.1) Create a scatter plot which will display bill_length_mm in relationship to bill_depth_mm with species denoted by different colors.\n1.5.2) Rename x and y axis to Bill Length (mm) and Bill Depth (mm), and legend title to Species.\n1.5.3) Change the plot theme to either theme_bw() or theme_classic().\n1.5.4) Export the plot to your computer in high resolution and save it as penguins_scatter.png.\nExpected outputs of the exercises shown below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nDid you get the following warnings after running the ggplot commands?\nRemoved 2 rows containing non-finite values (stat_boxplot()). Removed 2 rows containing missing values (geom_point()).\nWhat do they mean?\n\n\n\n\n\n\n\n\n\nTask\n\n\n\n2.1) Import the dataset you downloaded from the internet in the previous lab.\n2.2) Create new columns in which character data will be treated as factors by R (if you have any).\n2.3) Choose one numerical variable and create a boxplot. Divide that boxplot by different groups if it makes sense. Change the names of axis titles and change the default theme.\n2.4) Choose one numerical variable and create a dotchart. Divide that dotchart by different groups if it makes sense.\n2.5) If there are two numerical columns in you data, create a scatter plot. Color points according to different groups if it makes sense, change the names of axis titles and change the default theme.\n\n\n\nUntil the end of the class or homework\n\n\n\nDatacamp assignment, Lab 4"
  },
  {
    "objectID": "posts/04_Intro2R_visual_data_exploration.html#mandatory-reading-before-next-class",
    "href": "posts/04_Intro2R_visual_data_exploration.html#mandatory-reading-before-next-class",
    "title": "GRAPHICAL DATA EXPLORATION IN R",
    "section": "Mandatory reading before next class",
    "text": "Mandatory reading before next class\n(on e-classroom)\nDytham, 2011, Choosing and using statistics for biologists:\nChapter 5: Statistics, variables and distributions Chapter 6: Descriptive and presentational techniques"
  },
  {
    "objectID": "posts/05_Intro2R_summary statistics.html",
    "href": "posts/05_Intro2R_summary statistics.html",
    "title": "SUMMARY STATISTICS IN R",
    "section": "",
    "text": "Summary\n\n\n\nIn this lab you will learn how to:\n\ncalculate summary statistics: arithmetic mean, median, standard deviation, interquantile range,\ncalculate summary statistics for different groups in the data using dplyr."
  },
  {
    "objectID": "posts/05_Intro2R_summary statistics.html#import-iris-and-penguins-dataset",
    "href": "posts/05_Intro2R_summary statistics.html#import-iris-and-penguins-dataset",
    "title": "SUMMARY STATISTICS IN R",
    "section": "Import iris and penguins dataset",
    "text": "Import iris and penguins dataset\n\n\n\n\n\n\nTask\n\n\n\nStart the RStudio from the R project icon that you created in the previous lab!\n\n\nTo be sure that the working directory is set to your project folder, use the get getwd() function. The result should end with .../My first R project (if you followed the instructions in the second lab).\n\ngetwd()\n\nImport the dataset, assign it to an object called iris and inspect that it was loaded correctly:\n\niris &lt;- read.csv(file = \"01_data/iris.csv\") \npenguins &lt;- read.table(file = \"01_data/penguins.txt\")\n\nhead(iris); str(iris)\n\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal_Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal_Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ...\n\nhead(penguins); str(penguins)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007\n\n\n'data.frame':   344 obs. of  8 variables:\n $ species          : chr  \"Adelie\" \"Adelie\" \"Adelie\" \"Adelie\" ...\n $ island           : chr  \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n $ bill_length_mm   : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int  181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int  3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : chr  \"male\" \"female\" \"female\" NA ...\n $ year             : int  2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ..."
  },
  {
    "objectID": "posts/05_Intro2R_summary statistics.html#summary-statistics",
    "href": "posts/05_Intro2R_summary statistics.html#summary-statistics",
    "title": "SUMMARY STATISTICS IN R",
    "section": "Summary statistics",
    "text": "Summary statistics\nSummary statistics include among other the following common measures of central tendency and variability of numerical variables:\n\nmean\n\nvariance\nstandard deviation (SD)\nstandard error of mean\n\nmedian\n\nquantiles (25th and 75 th percentile)\ninterquantile range (IQR).\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\nHow is the arithmetic mean defined? Are there occasions when it is not an appropriate measure to use?\nWhat is variance and what standard deviation? In what units are the defined compared to the variable itself and the mean value?\nHow is the median defined? In which occasions it is more appropriate to use it?\n\n\n\nWhen to use each?\nExplore at minimum graphically using the histogram and than decide which is more appropriate. If the distribution resembles normal, than mean and SD, if not, than median and quantiles. The histogram can be ploted with ggplot, in which we define what we want to be ploted on the x axis, the y axis will be drawn bY default. Than we need to add the geom_histogram():\nExample of iris for Sepal_Length:\n\nlibrary(ggplot2)\n\nggplot(iris, aes(x = Sepal_Length)) +\n    geom_histogram()\n\n\n\n\nAnd for penguins of fliper_length_mm:\n\nggplot(penguins, aes(x = flipper_length_mm)) +\n    geom_histogram() \n\n\n\n\n\nFor each of the summary statistics above there is an appropriate R function to calculate it for us. First, we will calculate the median - median() function, quantiles - quantile() and interquantile range - IQR() function. We will calculate this for the column Sepal_Length of iris dataset, again remember that we access columns with $:\n\nmedian(iris$Sepal_Length)\n\n[1] 5.8\n\nquantile(iris$Sepal_Length)\n\n  0%  25%  50%  75% 100% \n 4.3  5.1  5.8  6.4  7.9 \n\nIQR(iris$Sepal_Length)\n\n[1] 1.3\n\n\nNext, the mean or average value of our numeric variable, variance and standard deviation. For this we use functions mean(), var() and sd(), from before we know, that we use $ to access columns:\n\nmean(iris$Sepal_Length)\n\n[1] 5.843333\n\nvar(iris$Sepal_Length)\n\n[1] 0.6856935\n\nsd(iris$Sepal_Length)\n\n[1] 0.8280661\n\n\n\nLets do the same for penguins:\n\nmedian(penguins$flipper_length_mm)\n\n[1] NA\n\n\nThis is certainly not what you expected, right? Instead of a number we got back NA. This is because our dataset contains NA values in the column flipper_length_mm. We fix this by adding argument na.rm = TRUE to all of these functions. With this argument we tell R to ignore or dismiss NA values if it finds them. The functions with included argument:\n\nmedian(penguins$flipper_length_mm, na.rm = TRUE)\n\n[1] 197\n\nquantile(penguins$flipper_length_mm, na.rm = TRUE)\n\n  0%  25%  50%  75% 100% \n 172  190  197  213  231 \n\nIQR(penguins$flipper_length_mm, na.rm = TRUE)\n\n[1] 23\n\nmean(penguins$flipper_length_mm, na.rm = TRUE)\n\n[1] 200.9152\n\nvar(penguins$flipper_length_mm, na.rm = TRUE)\n\n[1] 197.7318\n\nsd(penguins$flipper_length_mm, na.rm = TRUE)\n\n[1] 14.06171"
  },
  {
    "objectID": "posts/05_Intro2R_summary statistics.html#summary-statistics-for-two-or-more-groups",
    "href": "posts/05_Intro2R_summary statistics.html#summary-statistics-for-two-or-more-groups",
    "title": "SUMMARY STATISTICS IN R",
    "section": "Summary statistics for two or more groups",
    "text": "Summary statistics for two or more groups\nHowever, we know that our data consists of multiple species and it would be sensible to group it by the Species column.\n\nlibrary(ggplot2)\n\nggplot(iris, aes(x = Sepal_Length)) +\n    geom_histogram() +\n    facet_wrap(~Species)\n\n\n\n\nFor this, we will return to the dplyr package, that enables to do this with ease - we can use the group_by() function to instruct R to treat groups separately. Next, we can use summarise() function to compute the summary statistics. We can also add the column, that will tell us the number of elements in each group with - n(). We will compute also the mean and the standard deviation of Sepal_Length.\n\n\n\n\n\n\nTip\n\n\n\nThe %&gt;% is used to “chain” operations meaning that one operation follows the next in the specified order and with that our code is more compact, efficient and readable. Below code is therefore read as:\n\ntake iris object\ngroup data in iris object by categories in Species column\nwithin summarise function compute:\n\nnumber of individuals belonging to each group n(),\nmean value of column Sepal_length for each group,\nand the standard deviation of Sepal_length.\n\n\n\n\nThe functions we will be using in the following examples are a part of the dplyr package, so we must load it before we can use them with library() function.\n\nlibrary(dplyr) \n\niris %&gt;%\n    group_by(Species) %&gt;%\n    summarise(\n        n(), # does not require any additional argument\n        mean(Sepal_Length), # you are already familiar with mean()\n        sd(Sepal_Length) # and sd() function\n    )\n\n# A tibble: 3 × 4\n  Species    `n()` `mean(Sepal_Length)` `sd(Sepal_Length)`\n  &lt;chr&gt;      &lt;int&gt;                &lt;dbl&gt;              &lt;dbl&gt;\n1 setosa        50                 5.01              0.352\n2 versicolor    50                 5.94              0.516\n3 virginica     50                 6.59              0.636\n\n\nThe above call can be slightly modified, so the outcome is more informative. We will name our results so it is easier to understand what we have calculated. We will name the outputs as number_of_animals, mean_sep_length and sd_sep_length and put this names in front of the corresponding functions within summarise() function.\n\n# We can name the results so it is easier to know what we got\niris %&gt;%\n    group_by(Species) %&gt;%\n    summarise(\n        n_individuals = n(),\n        mean_sep_length = mean(Sepal_Length),\n        sd_sep_length = sd(Sepal_Length)\n) \n\n# A tibble: 3 × 4\n  Species    n_individuals mean_sep_length sd_sep_length\n  &lt;chr&gt;              &lt;int&gt;           &lt;dbl&gt;         &lt;dbl&gt;\n1 setosa                50            5.01         0.352\n2 versicolor            50            5.94         0.516\n3 virginica             50            6.59         0.636"
  },
  {
    "objectID": "posts/05_Intro2R_summary statistics.html#exercises",
    "href": "posts/05_Intro2R_summary statistics.html#exercises",
    "title": "SUMMARY STATISTICS IN R",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nTask\n\n\n\nRead the instructions carefully. If you don’t understand something or something doesn’t work straight away, first think about the problem/error, consult the materials in front of you, than google, than the neighbor on your left and on your right. If after all that you still don’t know how to fix the problem or proceed, than ask me for help!\n\nFor penguins dataset:\n1.1) Create a histogram of body_mass_g that is divided by species and sex of the penguins. To do that, you will need to include ~ species + sex within the function, that divides the data.\n1.2) Calculate median and interquantile range for bill_length_mm divided by species and island using dplyr package. Add also the column in which the number of individuals of each group will be shown.\n1.3) Calculate mean and standard deviation for bill_depth_mm divided by species and sex using dplyr package. Add also the column in which the number of individuals of each group will be shown.\nExpected outputs of the exercises shown below:\n\n\n\n\n\n\n\n# A tibble: 5 × 5\n# Groups:   species [3]\n  species   island        N median_bill_length iqr_bill_length\n  &lt;chr&gt;     &lt;chr&gt;     &lt;int&gt;              &lt;dbl&gt;           &lt;dbl&gt;\n1 Adelie    Biscoe       44               38.7            3.02\n2 Adelie    Dream        56               38.6            3.62\n3 Adelie    Torgersen    52               38.9            4.45\n4 Chinstrap Dream        68               49.6            4.73\n5 Gentoo    Biscoe      124               47.3            4.25\n\n\n# A tibble: 8 × 5\n# Groups:   species [3]\n  species   sex        N mean_bill_length sd_bill_length\n  &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt;            &lt;dbl&gt;          &lt;dbl&gt;\n1 Adelie    female    73             37.3           2.03\n2 Adelie    male      73             40.4           2.28\n3 Adelie    &lt;NA&gt;       6             37.8           2.80\n4 Chinstrap female    34             46.6           3.11\n5 Chinstrap male      34             51.1           1.56\n6 Gentoo    female    58             45.6           2.05\n7 Gentoo    male      61             49.5           2.72\n8 Gentoo    &lt;NA&gt;       5             45.6           1.37\n\n\n\n\n\n\n\n\nQuestion\n\n\n\n\nWhat do you think about displaying the data of individuals with unknown sex (NA)? Would it be sensible to omit it? If yes, in which cases?\n\n\n\n\n\n\n\n\n\n\nTask\n\n\n\n2.1) Import the dataset you downloaded from the internet in the previous lab.\n2.2) Create histograms of numerical columns using ggplot.\n2.3) Create histograms of numerical columns divided by sensible groups using ggplot.\n2.4) Calculate summary statistics: mean, median, standard deviation and IQR for two numerical columns in your dataset. Divide the data into sensible groups.\n\n\n\nFinal report\n\n\n\n\n\n\nFinal report\n\n\n\nPrepare a report in MS Word format, cover page and 3-5 pages with content, that will include:\n\na short description of the dataset that you used as your own example in the labs (you can also include photos or other graphics for better illustration),\na boxplot, a dotchart, a scatterplot and a histogram of your data, keep in mind if there are meaningful groups that can divide your data,\na table in which summary statistics of numerical variables will be presented,\na short text (several sentences) accompanying each figure and the table.\n\n\n\nDeadline: 12th October 2023, Upload to e-classroom.\n\n\nUntil the end of the class or homework\n\n\n\nDatacamp assignment, Lab 5"
  },
  {
    "objectID": "posts/04_Intro2R_visual_data_exploration.html#reading-before-next-lab",
    "href": "posts/04_Intro2R_visual_data_exploration.html#reading-before-next-lab",
    "title": "GRAPHICAL DATA EXPLORATION IN R",
    "section": "Reading before next lab",
    "text": "Reading before next lab\n(on e-classroom)\nDytham, 2011, Choosing and using statistics for biologists:\nChapter 5: Statistics, variables and distributions Chapter 6: Descriptive and presentational techniques"
  },
  {
    "objectID": "posts/01_SDMs_species_occurence_and_absence.html",
    "href": "posts/01_SDMs_species_occurence_and_absence.html",
    "title": "Obtaining occurrences and creating pseudo-absences of species",
    "section": "",
    "text": "Summary\n\n\n\nIn this lab you will:\n\nuse R code to access species occurrence data on GBIF server and download it,\nfilter and select data to retain only information of interest,\nlearn how to simulate pseudo-absence points in areas around species presences,\ncreate an interactive map of spatial points."
  },
  {
    "objectID": "posts/01_SDMs_species_occurence_and_absence.html#before-we-start",
    "href": "posts/01_SDMs_species_occurence_and_absence.html#before-we-start",
    "title": "Obtaining occurrences and creating pseudo-absences of species",
    "section": "Before we start",
    "text": "Before we start\n\n\n\n\n\n\nTask\n\n\n\n\nCreate new R project following Lab 2 of Intro to R, and name it Introduction to species distribution models,\nCreate folders 01_data, 02_scripts, 03_results,\nOpen new R script and save it as Erebia stirius.\nWhen following this lab, copy & paste the code so it is organised as it is in the teaching materials."
  },
  {
    "objectID": "posts/01_SDMs_species_occurence_and_absence.html#lab-plan",
    "href": "posts/01_SDMs_species_occurence_and_absence.html#lab-plan",
    "title": "Obtaining occurrences and creating pseudo-absences of species",
    "section": "Lab plan",
    "text": "Lab plan"
  },
  {
    "objectID": "posts/01_SDMs_species_occurence_and_absence.html#occurence-data-of-organisms-points-in-space-and-time-for-distribution-models",
    "href": "posts/01_SDMs_species_occurence_and_absence.html#occurence-data-of-organisms-points-in-space-and-time-for-distribution-models",
    "title": "Obtaining occurrences and creating pseudo-absences of species",
    "section": "Occurence data of organisms (points in space and time) for distribution models",
    "text": "Occurence data of organisms (points in space and time) for distribution models\nOccurrences of organisms can be collected from multiple sources (see Guisan et al., 2017, pp. 111):\n\nField data,\nTracking data,\nLiterature data,\nHerbarium and museum data or\nDatabases (that can contain all of the above).\n\nThe minimum number of presences ought to be more than 30 (as model performance declines severely, if fewer than), while sample size effects usually become less critical above 50 presences. Additionally, for more robust parameter estimation, a rule of thumb is to have a minimum of ten presence observations available per environmental predictor used. Guisan et al. (2017) advises this minimum to be raised to 20 - 50 observations per predictor (depending on the complexity of the models to be built).\nWe will take advantage of obtaining occurrences provided by a global and freely accessible database Global Biodiversity Information Facility - GBIF. GBIF is an international network and data infrastructure funded by the world’s governments and aimed at providing anyone, anywhere, open access to data about all types of life on Earth. More about GBIF database you can find here.\n\n\n\n\nGBIF dataset website\n\n\n\nOur lab will be focused on a butterfly species of Erebia genus:\n\n\n\n\nE. stirius.\n\n\n\n\nErebia stirius - Stirian ringlet: endemic to the area between the SE Alps and the N Dinaric Alps, where it inhabits grassy, rocky slopes, between 700 and 1800 m. Caterpillars feed mainly on the grass species Sesleria caerulea. The species is listed as Least Concerned by the IUCN (link)\n\n\n\n\n\n\nE. stirius distribution.\n\n\n\n\nWe will access the occurrence data straight from R with using occ_search() function from rgbif package to download the data from the portal. To do this for E. stirius we have to set argument scientificName = \"Erebia stirius\".\n\ninstall.packages(\"rgbif\")\ninstall.packages(\"tidyverse\")\n\n\nlibrary(rgbif)\nlibrary(tidyverse)\n\n# access data: Erebia stirius and assign it to object stirius_gbif\nstirius_gbif &lt;- occ_search(scientificName = \"Erebia stirius\",\n                           # increase the default number of retrieved \n                           # locations to 1000 \n                           limit = 1000) \n\nThe downloaded dataset is a list from which we extract only data element with the $ sign:\n\nstirius &lt;- stirius_gbif$data \n\n\n\n\n\n\n\nTask\n\n\n\nClick on the stirius_gbif and explore the dataframe. What are the columns that are useful to us and which do not seem important?\n\n\nWhen we examine the returned data frame, there are many columns, that seem to have no particular meaning for us. So we will select only those, that we might need for further investigation or use. For sure we need GPS coordinates (decimalLatitude and decimalLongitude) while along with that, we will extract the error of the GPS coordinates (coordinateUncertaintyInMeters), year of publishing the record, basis of record (basisOfRecord). Remember that within select() we can rename columns in the same step (lat = and lon = for example) and using %&gt;% operator we chain operations, meaning that the subsequent operations will be executed on the object preceding the operator.\n\n\n\n\n\n\nWarning\n\n\n\nFunctions select() and filter() are defined in multiple R packages. Depending on which package was loaded last by library(), R chooses which version of the function it will apply. If we do not get the expected result from the function or an unexpected error after running it, this is the likeliest cause.\n\n\n\n\n\n\n\n\nTip\n\n\n\nWe can avoid problems with commonly named functions by telling R a priori which function from which package we want to use. For example, select() or filter() from dplyr as follows:\n\ndplyr::filter(),\ndplyr::select().\n\n\n\n\nstirius &lt;- stirius %&gt;% \n    dplyr::select(species, \n           lat = decimalLatitude,\n           lon = decimalLongitude,\n           gps_error_m = coordinateUncertaintyInMeters,\n           year,\n           record_origin = basisOfRecord)\n\nNext steps in occurrence data preparation is to:\n\nexclude all NA values in the GPS coordinates (with drop_na() from tidyr), as if we do not have coordinates, we cannot use these occurrences in the analysis.\n\n\nstirius &lt;- stirius %&gt;% \n    tidyr::drop_na(lat, lon) \n\n\nexamine the year when the record was published and decide, what year range we will include (i.e. very old records might be biased due to differences in environmental conditions)\n\n\nlibrary(ggplot2)\n\nggplot(stirius, aes(x = year)) +\n    geom_histogram() +\n    theme_classic()\n\n\n\n\n\nexamine record origin (if museum, we need to check that location provided is not museum location!),\n\n\ntable(stirius$record_origin)\n\n\n HUMAN_OBSERVATION    LIVING_SPECIMEN  MATERIAL_CITATION    MATERIAL_SAMPLE \n                67                  1                119                  2 \n        OCCURRENCE PRESERVED_SPECIMEN \n               352                 44 \n\n\n\nexamine gps errors and decide, what to do with records with large location error (i.e. more than 5 km).\n\n\nggplot(stirius, aes(x = gps_error_m)) +\n    geom_histogram() +\n    theme_classic()\n\n\n\n\nAnd retain only the observations that satisfy our criteria. For later convenience, we will also add a column ID with consecutive numbers starting from 1.\n\nstirius &lt;- \n    stirius %&gt;% \n    filter(\n        year &gt; 1950, # retain only records after 1950\n        # retain observations and occurences\n        record_origin %in% c(\"HUMAN_OBSERVATION\", \"OCCURRENCE\"), \n        gps_error_m &lt;= 5000 # with 5000 m or less error\n    ) \n\nstirius &lt;- stirius %&gt;% \n    # add an ID column: numbers from 1 to max number of rows\n    mutate(ID = seq(1:nrow(stirius)))\n\nLastly, lets check the properties of our data frame:\n\nstr(stirius)\n\ntibble [154 × 7] (S3: tbl_df/tbl/data.frame)\n $ species      : chr [1:154] \"Erebia parmenio\" \"Erebia parmenio\" \"Erebia parmenio\" \"Erebia parmenio\" ...\n $ lat          : num [1:154] 45.8 45.7 46 46.4 46.4 ...\n $ lon          : num [1:154] 11.2 10.8 10.7 13.6 13.6 ...\n $ gps_error_m  : num [1:154] 61 184 25 25 26 6 25 50 20 50 ...\n $ year         : int [1:154] 2022 2022 2022 2021 2021 2021 2020 2020 2020 2020 ...\n $ record_origin: chr [1:154] \"HUMAN_OBSERVATION\" \"HUMAN_OBSERVATION\" \"HUMAN_OBSERVATION\" \"HUMAN_OBSERVATION\" ...\n $ ID           : int [1:154] 1 2 3 4 5 6 7 8 9 10 ...\n\nsummary(stirius)\n\n   species               lat             lon         gps_error_m  \n Length:154         Min.   :45.27   Min.   :10.68   Min.   :   2  \n Class :character   1st Qu.:45.80   1st Qu.:13.20   1st Qu.:  25  \n Mode  :character   Median :46.37   Median :13.72   Median : 500  \n                    Mean   :46.20   Mean   :13.44   Mean   :1614  \n                    3rd Qu.:46.44   3rd Qu.:14.02   3rd Qu.:5000  \n                    Max.   :47.62   Max.   :15.15   Max.   :5000  \n      year      record_origin            ID        \n Min.   :1951   Length:154         Min.   :  1.00  \n 1st Qu.:1972   Class :character   1st Qu.: 39.25  \n Median :1981   Mode  :character   Median : 77.50  \n Mean   :1989                      Mean   : 77.50  \n 3rd Qu.:2013                      3rd Qu.:115.75  \n Max.   :2022                      Max.   :154.00  \n\n\n\nMap occurences with leaflet interactive maps\nNow that we have downloaded the data, we will display them on a map, so we get a feeling of where our two species have been observed. For that we will use leaflet package which provides us an easy way for creating interactive maps. It functions similar to creating plots with ggplot, the difference is that we add new layers to the plots with %&gt;% operator. The basic function for mapping is leaflet() inside which we specify data object we want to plot, in our case stirius. With addProviderTiles() we add background to our map and with argument provider = \"Stamen.TerrainBackground\" we specify which type of background. You can explore other options for background here. You can change the background by replacing \"Stamen.TerrainBackground\" with another name, i.e. \"OpenTopoMap\". Next we add our points with function addCircleMarkers(), within which we must specify names of columns in our data that represent longitude (lon) and latitude (lat) preceeded by the ~ sign.\n\n\ninstall.packages(\"leaflet\")\n\n\nlibrary(leaflet) # fast, simple and efficient interactive mapping\n\nleaflet(stirius) %&gt;%\n    addProviderTiles(provider = \"Stamen.TerrainBackground\") %&gt;%\n    addCircleMarkers(lng = ~lon, \n                     lat = ~lat)\n\n\n\n\n\n\n\n\n\n\n\nTask\n\n\n\nTo confirm whether the occurence locations are reliable, we should compare them with the known distribution range of the species. Do this map reflect the species distribution according to IUCN?\n\n\n\n\n\nE. stirius distribution.\n\n\n\nHowever, there are some points, that don’t seem OK:\n\none is located at the center of Garda lake,\nanother is located at the Adriatic coast (there seem to be more occurences here, as the point is not transparent).\n\nLets adapt the map a bit, to figure out which points in the data these two are. We will add the label = argument, that will pop-up the ID of each point, when we hover over:\n\nleaflet(stirius) %&gt;%\n    addProviderTiles(provider = \"Stamen.TerrainBackground\") %&gt;%\n    addCircleMarkers(lng = ~lon, \n                     lat = ~lat, \n                     label = ~ID) # pop up with the ID number\n\n\n\n\n\n\nWe will remove this two as they seem erroneous. Within filter() we will use ! to retain the inverse of the IDs we will provide (I added also the ID 82 & 83, as both lie directly below the record number 104):\n\nstirius &lt;- stirius %&gt;% \n    dplyr::filter(!ID %in% c(82, 83, 114, 140))\n\nNow redraw the map, to see if it was successful:\n\nleaflet(stirius) %&gt;%\n    addProviderTiles(provider = \"Stamen.TerrainBackground\") %&gt;%\n    addCircleMarkers(lng = ~lon, \n                     lat = ~lat, \n                     label = ~ID) # pop up with the ID number\n\n\n\n\n\n\n\n\n\n\n\nQuestions to consider\n\n\n\nHow reliable is the data obtained from GBIF?\nShould we put more considerations on the origin of the occurrence data? For example, is it coming from research studies or was it provided by the citizen scientists?\nIn general, what are the main possible errors or biases that can be present in collecting species occurrence data?"
  },
  {
    "objectID": "posts/01_SDMs_species_occurence_and_absence.html#absences-and-what-to-do-if-we-dont-have-them",
    "href": "posts/01_SDMs_species_occurence_and_absence.html#absences-and-what-to-do-if-we-dont-have-them",
    "title": "Obtaining occurrences and creating pseudo-absences of species",
    "section": "Absences and what to do if we don’t have them",
    "text": "Absences and what to do if we don’t have them\nReal absences are hard to obtain in most cases (i.e. species present, but not detected; research areas to big to monitor all available area, etc.). For that reason, there are multiple options to generate pseudo-absences, depending on the species, type of data, research question, scale of inference (global, regional, local):\n\nbackground,\nbuffer,\nCorrelated Random Walks,\nreverse Correlated Random Walks,\nother.\n\n\n\n\nPseudo absence generation methods (Hazen et al., 2021)\n\n\nFor simplicity, we will use the buffer method. For now, we will just create a buffer around our points, which will be later used as an area for pseudo-absence points creation. In order to perform spatial operations on our data, we need to transform it into appropriate spatial format with coordinates() function from sp package. We will create a new object called stirius_sp, which we will transform. After the assign operator we define which columns in our data represent longitude and latitude. With class() we check that the transformation was successful.\n\ninstall.packages(\"sp\")\ninstall.packages(\"raster\")\n\n\nlibrary(sp)\nlibrary(raster)\n\nstirius_sp &lt;- stirius\n\n# In order to perform spatial operations on our data, we need to transform it\n# into appropriate type of object with coordinates function\ncoordinates(stirius_sp) &lt;- ~ lon + lat\n\nclass(stirius_sp) # we want SpatialPointsDataFrame\n\n[1] \"SpatialPointsDataFrame\"\nattr(,\"package\")\n[1] \"sp\"\n\n\nNext we create a buffer around our points with buffer() function and set its width = to 20 km (20000m). As the buffer() function is contained in more than one package, I specified that I want the one from raster package with ::. Note that 25 km buffer width is an arbitrary number, I choose it based on the assumed dispersal potential of the butterfly species. When creating buffers it is crucial, that we choose a distance, that is biologically or ecologically sensible. For example, whales can travel tens of km per day, while a mole will likely spend its entire lifespan within a single small or medium meadow.\n\nstirius_buffer &lt;- raster::buffer(stirius_sp, # arround occurences of E. stirius \n                          width = 25000) # create 25 km buffer \n\nclass(stirius_buffer)\n\n[1] \"SpatialPolygons\"\nattr(,\"package\")\n[1] \"sp\"\n\n\nLets map the created buffer with leaflet, this time instead of mapping points we add a the buffer layer with addPolygons() function without any additional arguments:\n\nleaflet(stirius_buffer) %&gt;% \n    addProviderTiles(provider = \"Stamen.TerrainBackground\") %&gt;%\n    addPolygons()\n\n\n\n\n\nThe next thing we will do is create a set of pseudo absence points within our buffer. For this we will need the terra package and change the stirius_buffer into appropriate terra format. We will save it in a new object called stirius_buffer_tr, and transform it using vect() function:\n\nlibrary(terra)\n\nstirius_buffer_tr &lt;- vect(stirius_buffer)\n\nclass(stirius_buffer_tr)\n\n[1] \"SpatVector\"\nattr(,\"package\")\n[1] \"terra\"\n\n\nThe pseudo absence points can be created using spatSample() function, that performs random sampling within the buffer provided (stirius_buffer_tr). The second argument tells the function, how many points we want to create. At this step, there are many considerations, that need to be taken into account, as the subsequent results can depend heavily on the number of points that we decide to sample (Barbet-Massin et al., 2012, Fieberg et al., 2021). We will keep it simple and create the same number of pseudo absences as we have presences (nrow(stirius) = 150). We will save these points into object stirius_abs:\n\nstirius_abs &lt;- spatSample(stirius_buffer_tr,\n                          size = nrow(stirius))\n\nclass(stirius_abs)\n\n[1] \"SpatVector\"\nattr(,\"package\")\n[1] \"terra\"\n\n\nBefore displaying the points on a map, we need to change the stirius_abs from terra format to a regular data frame. For that, we extract the coordinates from the object stirius_abs (terra::geom()) and change it to dataframe (as.data.frame()):\n\nstirius_abs_df &lt;- as.data.frame(terra::geom(stirius_abs))\n\nclass(stirius_abs_df)\n\n[1] \"data.frame\"\n\n\nWith head() function, we display the first six rows of the dataframe, and we can note that the coordinates are stored in columns x and y:\n\nhead(stirius_abs_df)\n\n  geom part        x        y hole\n1    1    1 10.58623 45.60428    0\n2    2    1 13.62337 46.47506    0\n3    3    1 13.32867 46.71282    0\n4    4    1 12.81040 46.19281    0\n5    5    1 10.99707 45.68529    0\n6    6    1 15.03421 45.20357    0\n\n\nAnd map them, to see where they were created:\n\nleaflet(stirius_abs_df) %&gt;%\n    addProviderTiles(provider = \"Stamen.TerrainBackground\") %&gt;%\n    addCircleMarkers(lng = ~x, \n                     lat = ~y, \n                     color = \"red\")"
  },
  {
    "objectID": "posts/01_SDMs_species_occurence_and_absence.html#finalising-presence-absence-datasets",
    "href": "posts/01_SDMs_species_occurence_and_absence.html#finalising-presence-absence-datasets",
    "title": "Obtaining occurrences and creating pseudo-absences of species",
    "section": "Finalising presence absence datasets",
    "text": "Finalising presence absence datasets\nThere is one more step in preparation of presences of E. stirius (stirius) dataset. We need to add a column (new variable) that will denote that this are points, where species is present (1). As we will not need other variables, we will select only species, both coordinates and presence columns:\n\nlibrary(dplyr)\n\n\n\nstirius &lt;- stirius %&gt;%\n    # create new column, denoting this are points where species is present\n    dplyr::mutate(presence = 1) %&gt;%  \n    dplyr::select(\n        species,\n        lat,\n        lon,\n        presence\n    )\n\nThe same step is needed in preparation of pseudo-absences, only this time time we need to add a column (new variable) that will denote that this are points, where the species is not present (0), or better said points that we have created as pseudo absences. As we will not need other variables, we will select only species, both coordinates (and rename them to lat and lon) and presence column:\n\n#stirius_abs_df &lt;- readRDS(\"01_data/stirius_abs_df.RDS\") \n\n\nstirius_abs_df &lt;- stirius_abs_df %&gt;%  \n    dplyr::mutate(species = \"Erebia parmenio\", # create now column with species name\n                  # create new column, denoting this are points where species is pseudo absent\n                  presence = 0) %&gt;% \n    dplyr::select(\n        species,\n        lat = y, # rename y to lat\n        lon = x, # rename x to lon\n        presence\n    )\n\nIn this last step today, we will merge the two dataframes together. Above steps prepared them to contain columns with the same names and the same information, which is a prerequisite for merging. We use rbind() function, which binds (merges) two tables in a way, that the first data frame is continued by the second, retaining the same number of columns as original data frame:\n\nhead(stirius) ; head(stirius_abs_df)\n\n# A tibble: 6 × 4\n  species           lat   lon presence\n  &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;\n1 Erebia parmenio  45.8  11.2        1\n2 Erebia parmenio  45.7  10.8        1\n3 Erebia parmenio  46.0  10.7        1\n4 Erebia parmenio  46.4  13.6        1\n5 Erebia parmenio  46.4  13.6        1\n6 Erebia parmenio  46.4  13.6        1\n\n\n          species      lat      lon presence\n1 Erebia parmenio 45.60428 10.58623        0\n2 Erebia parmenio 46.47506 13.62337        0\n3 Erebia parmenio 46.71282 13.32867        0\n4 Erebia parmenio 46.19281 12.81040        0\n5 Erebia parmenio 45.68529 10.99707        0\n6 Erebia parmenio 45.20357 15.03421        0\n\nstirius_pa &lt;- rbind(stirius_abs_df, stirius)"
  },
  {
    "objectID": "posts/01_SDMs_species_occurence_and_absence.html#export-the-data",
    "href": "posts/01_SDMs_species_occurence_and_absence.html#export-the-data",
    "title": "Obtaining occurrences and creating pseudo-absences of species",
    "section": "Export the data",
    "text": "Export the data\nWe will export the presence absence dataframe and the buffer, so they will be available to us in the following labs, when we will need it.\n\nsaveRDS(stirius_pa, \"01_data/stirius_pa.RDS\")\nsaveRDS(stirius_buffer, \"01_data/stirius_buffer.RDS\")"
  },
  {
    "objectID": "posts/01_SDMs_species_occurence_and_absence.html#assignment",
    "href": "posts/01_SDMs_species_occurence_and_absence.html#assignment",
    "title": "Obtaining occurrences and creating pseudo-absences of species",
    "section": "Assignment",
    "text": "Assignment\n\n\n\n\n\n\nTask\n\n\n\n\nCreate new R script and name it as the species you choose to work on.\nCopy - paste the code from the Erebia stirius script to your empty script.\nAdapt the code to achieve the following:\n\n3.1) download the data for your species from GBIF,\n3.2) filter the data to retain only reliable occurrence locations,\n3.3) create a spatial buffer around occurrences and sample pseudo-absence within it,\n3.4) merge the presence and pseudo-absence dataframes, and export them to the hard drive (also the buffer),\n3.5) save the script with the code for your species,\n3.6) make sure that the project folder will be available to you next week at the labs (either store it on usb, cloud or similar, in case it gets deleted from computers)."
  },
  {
    "objectID": "posts/01_SDMs_species_occurence_and_absence.html#occurence-data-for-distribution-models",
    "href": "posts/01_SDMs_species_occurence_and_absence.html#occurence-data-for-distribution-models",
    "title": "Obtaining occurrences and creating pseudo-absences of species",
    "section": "Occurence data for distribution models",
    "text": "Occurence data for distribution models\nOccurrences of organisms can be collected from multiple sources (see Guisan et al., 2017, pp. 111):\n\nField data,\nTracking data,\nLiterature data,\nHerbarium and museum data or\nDatabases (that can contain all of the above).\n\nThe minimum number of presences ought to be more than 30 (as model performance declines severely, if fewer than), while sample size effects usually become less critical above 50 presences. Additionally, for more robust parameter estimation, a rule of thumb is to have a minimum of ten presence observations available per environmental variable used. Guisan et al. (2017) advises this minimum to be raised to 20 - 50 observations per predictor (depending on the complexity of the models to be built).\nWe will take advantage of obtaining occurrences provided by a global and freely accessible database Global Biodiversity Information Facility - GBIF. GBIF is an international network and data infrastructure funded by the world’s governments and aimed at providing anyone, anywhere, open access to data about all types of life on Earth. More about GBIF database you can find here.\n\n\n\n\nGBIF dataset website\n\n\n\nOur lab will be focused on a butterfly species of Erebia genus:\n\n\n\n\nE. stirius.\n\n\n\n\nErebia stirius - Stirian ringlet: endemic to the area between the SE Alps and the N Dinaric Alps, where it inhabits grassy, rocky slopes, between 700 and 1800 m. Caterpillars feed mainly on the grass species Sesleria caerulea. The species is listed as Least Concerned by the IUCN (link)\n\n\n\n\n\n\nE. stirius distribution.\n\n\n\n\nWe will access the occurrence data straight from R with using occ_search() function from rgbif package to download the data from the portal. To do this for E. stirius we have to set argument scientificName = \"Erebia stirius\".\n\ninstall.packages(\"rgbif\")\ninstall.packages(\"tidyverse\")\n\n\nlibrary(rgbif)\nlibrary(tidyverse)\n\n# access data: Erebia stirius and assign it to object stirius_gbif\nstirius_gbif &lt;- occ_search(scientificName = \"Erebia stirius\",\n                           # increase the default number of retrieved \n                           # locations to 1000 \n                           limit = 1000) \n\nThe downloaded dataset is a list from which we extract only data element with the $ sign:\n\nstirius &lt;- stirius_gbif$data \n\n\n\n\n\n\n\nTask\n\n\n\nClick on the stirius_gbif and explore the dataframe. What are the columns that are useful to us and which do not seem important?\n\n\nWhen we examine the returned data frame, there are many columns, that seem to have no particular meaning for us. So we will select only those, that we might need for further investigation or use. For sure we need GPS coordinates (decimalLatitude and decimalLongitude) while along with that, we will extract the error of the GPS coordinates (coordinateUncertaintyInMeters), year of publishing the record, basis of record (basisOfRecord). Remember that within select() we can rename columns in the same step (lat = and lon = for example) and using %&gt;% operator we chain operations, meaning that the subsequent operations will be executed on the object preceding the operator.\n\n\n\n\n\n\nWarning\n\n\n\nFunctions select() and filter() are defined in multiple R packages. Depending on which package was loaded last by library(), R chooses which version of the function it will apply. If we do not get the expected result from the function or an unexpected error after running it, this is the likeliest cause.\n\n\n\n\n\n\n\n\nTip\n\n\n\nWe can avoid problems with commonly named functions by telling R a priori which function from which package we want to use. For example, select() or filter() from dplyr as follows:\n\ndplyr::filter(),\ndplyr::select().\n\n\n\n\nstirius &lt;- stirius %&gt;% \n    dplyr::select(species, \n           lat = decimalLatitude,\n           lon = decimalLongitude,\n           gps_error_m = coordinateUncertaintyInMeters,\n           year,\n           record_origin = basisOfRecord)\n\nNext steps in occurrence data preparation is to:\n\nexclude all NA values in the GPS coordinates (with drop_na() from tidyr), as if we do not have coordinates, we cannot use these occurrences in the analysis.\n\n\nstirius &lt;- stirius %&gt;% \n    tidyr::drop_na(lat, lon) \n\n\nexamine the year when the record was published and decide, what year range we will include (i.e. very old records might be biased due to differences in environmental conditions)\n\n\nlibrary(ggplot2)\n\nggplot(stirius, aes(x = year)) +\n    geom_histogram() +\n    theme_classic()\n\n\n\n\n\nexamine record origin (if museum, we need to check that location provided is not museum location!),\n\n\ntable(stirius$record_origin)\n\n\n HUMAN_OBSERVATION    LIVING_SPECIMEN  MATERIAL_CITATION    MATERIAL_SAMPLE \n                67                  1                119                  2 \n        OCCURRENCE PRESERVED_SPECIMEN \n               352                 44 \n\n\n\nexamine gps errors and decide, what to do with records with large location error (i.e. more than 5 km).\n\n\nggplot(stirius, aes(x = gps_error_m)) +\n    geom_histogram() +\n    theme_classic()\n\n\n\n\nAnd retain only the observations that satisfy our criteria. For later convenience, we will also add a column ID with consecutive numbers starting from 1.\n\nstirius &lt;- \n    stirius %&gt;% \n    filter(\n        year &gt; 1950, # retain only records after 1950\n        # retain observations and occurences\n        record_origin %in% c(\"HUMAN_OBSERVATION\", \"OCCURRENCE\"), \n        gps_error_m &lt;= 5000 # with 5000 m or less error\n    ) \n\nstirius &lt;- stirius %&gt;% \n    # add an ID column: numbers from 1 to max number of rows\n    mutate(ID = seq(1:nrow(stirius)))\n\nLastly, lets check the properties of our data frame:\n\nstr(stirius)\n\ntibble [154 × 7] (S3: tbl_df/tbl/data.frame)\n $ species      : chr [1:154] \"Erebia parmenio\" \"Erebia parmenio\" \"Erebia parmenio\" \"Erebia parmenio\" ...\n $ lat          : num [1:154] 45.8 45.7 46 46.4 46.4 ...\n $ lon          : num [1:154] 11.2 10.8 10.7 13.6 13.6 ...\n $ gps_error_m  : num [1:154] 61 184 25 25 26 6 25 50 20 50 ...\n $ year         : int [1:154] 2022 2022 2022 2021 2021 2021 2020 2020 2020 2020 ...\n $ record_origin: chr [1:154] \"HUMAN_OBSERVATION\" \"HUMAN_OBSERVATION\" \"HUMAN_OBSERVATION\" \"HUMAN_OBSERVATION\" ...\n $ ID           : int [1:154] 1 2 3 4 5 6 7 8 9 10 ...\n\nsummary(stirius)\n\n   species               lat             lon         gps_error_m  \n Length:154         Min.   :45.27   Min.   :10.68   Min.   :   2  \n Class :character   1st Qu.:45.80   1st Qu.:13.20   1st Qu.:  25  \n Mode  :character   Median :46.37   Median :13.72   Median : 500  \n                    Mean   :46.20   Mean   :13.44   Mean   :1614  \n                    3rd Qu.:46.44   3rd Qu.:14.02   3rd Qu.:5000  \n                    Max.   :47.62   Max.   :15.15   Max.   :5000  \n      year      record_origin            ID        \n Min.   :1951   Length:154         Min.   :  1.00  \n 1st Qu.:1972   Class :character   1st Qu.: 39.25  \n Median :1981   Mode  :character   Median : 77.50  \n Mean   :1989                      Mean   : 77.50  \n 3rd Qu.:2013                      3rd Qu.:115.75  \n Max.   :2022                      Max.   :154.00  \n\n\n\nMap occurences with leaflet interactive maps\nNow that we have downloaded the data, we will display them on a map, so we get a feeling of where our two species have been observed. For that we will use leaflet package which provides us an easy way for creating interactive maps. It functions similar to creating plots with ggplot, the difference is that we add new layers to the plots with %&gt;% operator. The basic function for mapping is leaflet() inside which we specify data object we want to plot, in our case stirius. With addProviderTiles() we add background to our map and with argument provider = \"Stamen.TerrainBackground\" we specify which type of background. You can explore other options for background here. You can change the background by replacing \"Stamen.TerrainBackground\" with another name, i.e. \"OpenTopoMap\". Next we add our points with function addCircleMarkers(), within which we must specify names of columns in our data that represent longitude (lon) and latitude (lat) preceeded by the ~ sign.\n\n\ninstall.packages(\"leaflet\")\n\n\nlibrary(leaflet) # fast, simple and efficient interactive mapping\n\nleaflet(stirius) %&gt;%\n    addProviderTiles(provider = \"Stamen.TerrainBackground\") %&gt;%\n    addCircleMarkers(lng = ~lon, \n                     lat = ~lat)\n\n\n\n\n\n\n\n\n\n\n\nTask\n\n\n\nTo confirm whether the occurence locations are reliable, we should compare them with the known distribution range of the species. Do this map reflect the species distribution according to IUCN?\n\n\n\n\n\nE. stirius distribution.\n\n\n\nHowever, there are some points, that don’t seem OK:\n\none is located at the center of Garda lake,\nanother is located at the Adriatic coast (there seem to be more occurences here, as the point is not transparent).\n\nLets adapt the map a bit, to figure out which points in the data these two are. We will add the label = argument, that will pop-up the ID of each point, when we hover over:\n\nleaflet(stirius) %&gt;%\n    addProviderTiles(provider = \"Stamen.TerrainBackground\") %&gt;%\n    addCircleMarkers(lng = ~lon, \n                     lat = ~lat, \n                     label = ~ID) # pop up with the ID number\n\n\n\n\n\n\nWe will remove this two as they seem erroneous. Within filter() we will use ! to retain the inverse of the IDs we will provide (I added also the ID 82 & 83, as both lie directly below the record number 104):\n\nstirius &lt;- stirius %&gt;% \n    dplyr::filter(!ID %in% c(82, 83, 114, 140))\n\nNow redraw the map, to see if it was successful:\n\nleaflet(stirius) %&gt;%\n    addProviderTiles(provider = \"Stamen.TerrainBackground\") %&gt;%\n    addCircleMarkers(lng = ~lon, \n                     lat = ~lat, \n                     label = ~ID) # pop up with the ID number\n\n\n\n\n\n\n\n\n\n\n\nQuestions to consider\n\n\n\nHow reliable is the data obtained from GBIF?\nShould we put more considerations on the origin of the occurrence data? For example, is it coming from research studies or was it provided by the citizen scientists?\nIn general, what are the main possible errors or biases that can be present in collecting species occurrence data?"
  }
]